
projekt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000005c  00800100  00000e2e  00000ec2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e2e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000057  0080015c  0080015c  00000f1e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000f1e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000f50  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000158  00000000  00000000  00000f90  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001d27  00000000  00000000  000010e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000bb4  00000000  00000000  00002e0f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000e50  00000000  00000000  000039c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003bc  00000000  00000000  00004814  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006e1  00000000  00000000  00004bd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000e9b  00000000  00000000  000052b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000148  00000000  00000000  0000614c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 93 02 	jmp	0x526	; 0x526 <__vector_9>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 3e 03 	jmp	0x67c	; 0x67c <__vector_13>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 2c 04 	jmp	0x858	; 0x858 <__vector_16>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 21 05 	jmp	0xa42	; 0xa42 <__vector_18>
  4c:	0c 94 4f 05 	jmp	0xa9e	; 0xa9e <__vector_19>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e2       	ldi	r30, 0x2E	; 46
  7c:	fe e0       	ldi	r31, 0x0E	; 14
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 35       	cpi	r26, 0x5C	; 92
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ac e5       	ldi	r26, 0x5C	; 92
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a3 3b       	cpi	r26, 0xB3	; 179
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 36 01 	call	0x26c	; 0x26c <main>
  9e:	0c 94 15 07 	jmp	0xe2a	; 0xe2a <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <GPIO_config_output>:
}

/*--------------------------------------------------------------------*/
void GPIO_toggle(volatile uint8_t *reg_name, uint8_t pin_num)
{	
	*reg_name = *reg_name ^ (1<<pin_num);
  a6:	fc 01       	movw	r30, r24
  a8:	40 81       	ld	r20, Z
  aa:	21 e0       	ldi	r18, 0x01	; 1
  ac:	30 e0       	ldi	r19, 0x00	; 0
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <GPIO_config_output+0xe>
  b0:	22 0f       	add	r18, r18
  b2:	33 1f       	adc	r19, r19
  b4:	6a 95       	dec	r22
  b6:	e2 f7       	brpl	.-8      	; 0xb0 <GPIO_config_output+0xa>
  b8:	24 2b       	or	r18, r20
  ba:	20 83       	st	Z, r18
  bc:	08 95       	ret

000000be <GPIO_config_input_nopull>:
  be:	fc 01       	movw	r30, r24
  c0:	80 81       	ld	r24, Z
  c2:	21 e0       	ldi	r18, 0x01	; 1
  c4:	30 e0       	ldi	r19, 0x00	; 0
  c6:	02 c0       	rjmp	.+4      	; 0xcc <GPIO_config_input_nopull+0xe>
  c8:	22 0f       	add	r18, r18
  ca:	33 1f       	adc	r19, r19
  cc:	6a 95       	dec	r22
  ce:	e2 f7       	brpl	.-8      	; 0xc8 <GPIO_config_input_nopull+0xa>
  d0:	20 95       	com	r18
  d2:	82 23       	and	r24, r18
  d4:	80 83       	st	Z, r24
  d6:	80 81       	ld	r24, Z
  d8:	81 81       	ldd	r24, Z+1	; 0x01
  da:	28 23       	and	r18, r24
  dc:	21 83       	std	Z+1, r18	; 0x01
  de:	08 95       	ret

000000e0 <GPIO_write_low>:
  e0:	fc 01       	movw	r30, r24
  e2:	90 81       	ld	r25, Z
  e4:	21 e0       	ldi	r18, 0x01	; 1
  e6:	30 e0       	ldi	r19, 0x00	; 0
  e8:	02 c0       	rjmp	.+4      	; 0xee <GPIO_write_low+0xe>
  ea:	22 0f       	add	r18, r18
  ec:	33 1f       	adc	r19, r19
  ee:	6a 95       	dec	r22
  f0:	e2 f7       	brpl	.-8      	; 0xea <GPIO_write_low+0xa>
  f2:	20 95       	com	r18
  f4:	29 23       	and	r18, r25
  f6:	20 83       	st	Z, r18
  f8:	08 95       	ret

000000fa <GPIO_write_high>:
  fa:	fc 01       	movw	r30, r24
  fc:	40 81       	ld	r20, Z
  fe:	21 e0       	ldi	r18, 0x01	; 1
 100:	30 e0       	ldi	r19, 0x00	; 0
 102:	02 c0       	rjmp	.+4      	; 0x108 <GPIO_write_high+0xe>
 104:	22 0f       	add	r18, r18
 106:	33 1f       	adc	r19, r19
 108:	6a 95       	dec	r22
 10a:	e2 f7       	brpl	.-8      	; 0x104 <GPIO_write_high+0xa>
 10c:	24 2b       	or	r18, r20
 10e:	20 83       	st	Z, r18
 110:	08 95       	ret

00000112 <GPIO_read>:
}

/*--------------------------------------------------------------------*/
uint8_t GPIO_read(volatile uint8_t *reg_name, uint8_t pin_num)
{
	if (bit_is_clear(*reg_name, pin_num))
 112:	fc 01       	movw	r30, r24
 114:	80 81       	ld	r24, Z
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	02 c0       	rjmp	.+4      	; 0x11e <GPIO_read+0xc>
 11a:	95 95       	asr	r25
 11c:	87 95       	ror	r24
 11e:	6a 95       	dec	r22
 120:	e2 f7       	brpl	.-8      	; 0x11a <GPIO_read+0x8>
	}
	else
	{
		return  1 ;
	}
}
 122:	81 70       	andi	r24, 0x01	; 1
 124:	08 95       	ret

00000126 <toggle_e>:

    while ( (c = pgm_read_byte(progmem_s++)) )
    {
        lcd_putc(c);
    }
}/* lcd_puts_p */
 126:	29 9a       	sbi	0x05, 1	; 5
 128:	85 e0       	ldi	r24, 0x05	; 5
 12a:	8a 95       	dec	r24
 12c:	f1 f7       	brne	.-4      	; 0x12a <toggle_e+0x4>
 12e:	00 00       	nop
 130:	29 98       	cbi	0x05, 1	; 5
 132:	08 95       	ret

00000134 <lcd_write>:
 134:	cf 93       	push	r28
 136:	c8 2f       	mov	r28, r24
 138:	66 23       	and	r22, r22
 13a:	11 f0       	breq	.+4      	; 0x140 <lcd_write+0xc>
 13c:	28 9a       	sbi	0x05, 0	; 5
 13e:	01 c0       	rjmp	.+2      	; 0x142 <lcd_write+0xe>
 140:	28 98       	cbi	0x05, 0	; 5
 142:	54 9a       	sbi	0x0a, 4	; 10
 144:	55 9a       	sbi	0x0a, 5	; 10
 146:	56 9a       	sbi	0x0a, 6	; 10
 148:	57 9a       	sbi	0x0a, 7	; 10
 14a:	5f 98       	cbi	0x0b, 7	; 11
 14c:	5e 98       	cbi	0x0b, 6	; 11
 14e:	5d 98       	cbi	0x0b, 5	; 11
 150:	5c 98       	cbi	0x0b, 4	; 11
 152:	cc 23       	and	r28, r28
 154:	0c f4       	brge	.+2      	; 0x158 <lcd_write+0x24>
 156:	5f 9a       	sbi	0x0b, 7	; 11
 158:	c6 fd       	sbrc	r28, 6
 15a:	5e 9a       	sbi	0x0b, 6	; 11
 15c:	c5 fd       	sbrc	r28, 5
 15e:	5d 9a       	sbi	0x0b, 5	; 11
 160:	c4 fd       	sbrc	r28, 4
 162:	5c 9a       	sbi	0x0b, 4	; 11
 164:	0e 94 93 00 	call	0x126	; 0x126 <toggle_e>
 168:	5f 98       	cbi	0x0b, 7	; 11
 16a:	5e 98       	cbi	0x0b, 6	; 11
 16c:	5d 98       	cbi	0x0b, 5	; 11
 16e:	5c 98       	cbi	0x0b, 4	; 11
 170:	c3 fd       	sbrc	r28, 3
 172:	5f 9a       	sbi	0x0b, 7	; 11
 174:	c2 fd       	sbrc	r28, 2
 176:	5e 9a       	sbi	0x0b, 6	; 11
 178:	c1 fd       	sbrc	r28, 1
 17a:	5d 9a       	sbi	0x0b, 5	; 11
 17c:	c0 fd       	sbrc	r28, 0
 17e:	5c 9a       	sbi	0x0b, 4	; 11
 180:	0e 94 93 00 	call	0x126	; 0x126 <toggle_e>
 184:	5c 9a       	sbi	0x0b, 4	; 11
 186:	5d 9a       	sbi	0x0b, 5	; 11
 188:	5e 9a       	sbi	0x0b, 6	; 11
 18a:	5f 9a       	sbi	0x0b, 7	; 11
 18c:	87 eb       	ldi	r24, 0xB7	; 183
 18e:	9b e0       	ldi	r25, 0x0B	; 11
 190:	01 97       	sbiw	r24, 0x01	; 1
 192:	f1 f7       	brne	.-4      	; 0x190 <lcd_write+0x5c>
 194:	00 c0       	rjmp	.+0      	; 0x196 <lcd_write+0x62>
 196:	00 00       	nop
 198:	cf 91       	pop	r28
 19a:	08 95       	ret

0000019c <lcd_command>:
 19c:	60 e0       	ldi	r22, 0x00	; 0
 19e:	0e 94 9a 00 	call	0x134	; 0x134 <lcd_write>
 1a2:	08 95       	ret

000001a4 <lcd_gotoxy>:
 1a4:	61 11       	cpse	r22, r1
 1a6:	04 c0       	rjmp	.+8      	; 0x1b0 <lcd_gotoxy+0xc>
 1a8:	80 58       	subi	r24, 0x80	; 128
 1aa:	0e 94 ce 00 	call	0x19c	; 0x19c <lcd_command>
 1ae:	08 95       	ret
 1b0:	80 54       	subi	r24, 0x40	; 64
 1b2:	0e 94 ce 00 	call	0x19c	; 0x19c <lcd_command>
 1b6:	08 95       	ret

000001b8 <lcd_clrscr>:
 1b8:	81 e0       	ldi	r24, 0x01	; 1
 1ba:	0e 94 ce 00 	call	0x19c	; 0x19c <lcd_command>
 1be:	08 95       	ret

000001c0 <lcd_putc>:
 1c0:	61 e0       	ldi	r22, 0x01	; 1
 1c2:	0e 94 9a 00 	call	0x134	; 0x134 <lcd_write>
 1c6:	08 95       	ret

000001c8 <lcd_puts>:
 1c8:	cf 93       	push	r28
 1ca:	df 93       	push	r29
 1cc:	ec 01       	movw	r28, r24
 1ce:	21 96       	adiw	r28, 0x01	; 1
 1d0:	fc 01       	movw	r30, r24
 1d2:	80 81       	ld	r24, Z
 1d4:	88 23       	and	r24, r24
 1d6:	29 f0       	breq	.+10     	; 0x1e2 <lcd_puts+0x1a>
 1d8:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <lcd_putc>
 1dc:	89 91       	ld	r24, Y+
 1de:	81 11       	cpse	r24, r1
 1e0:	fb cf       	rjmp	.-10     	; 0x1d8 <lcd_puts+0x10>
 1e2:	df 91       	pop	r29
 1e4:	cf 91       	pop	r28
 1e6:	08 95       	ret

000001e8 <lcd_init>:
*                  LCD_DISP_ON_CURSOR      display on, cursor on
*                  LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
*  Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 1e8:	cf 93       	push	r28
 1ea:	c8 2f       	mov	r28, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
 1ec:	20 9a       	sbi	0x04, 0	; 4
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
 1ee:	55 9a       	sbi	0x0a, 5	; 10
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
 1f0:	21 9a       	sbi	0x04, 1	; 4
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
 1f2:	54 9a       	sbi	0x0a, 4	; 10
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
 1f4:	55 9a       	sbi	0x0a, 5	; 10
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
 1f6:	56 9a       	sbi	0x0a, 6	; 10
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
 1f8:	57 9a       	sbi	0x0a, 7	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1fa:	8f ef       	ldi	r24, 0xFF	; 255
 1fc:	99 ef       	ldi	r25, 0xF9	; 249
 1fe:	01 97       	sbiw	r24, 0x01	; 1
 200:	f1 f7       	brne	.-4      	; 0x1fe <lcd_init+0x16>
 202:	00 c0       	rjmp	.+0      	; 0x204 <lcd_init+0x1c>
 204:	00 00       	nop
    }
    delay(LCD_DELAY_BOOTUP); /* wait 16ms or more after power-on       */

    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN); // LCD_FUNCTION>>4;
 206:	5d 9a       	sbi	0x0b, 5	; 11
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN); // LCD_FUNCTION_8BIT>>4;
 208:	5c 9a       	sbi	0x0b, 4	; 11
    lcd_e_toggle();
 20a:	0e 94 93 00 	call	0x126	; 0x126 <toggle_e>
 20e:	8f e1       	ldi	r24, 0x1F	; 31
 210:	9e e4       	ldi	r25, 0x4E	; 78
 212:	01 97       	sbiw	r24, 0x01	; 1
 214:	f1 f7       	brne	.-4      	; 0x212 <lcd_init+0x2a>
 216:	00 c0       	rjmp	.+0      	; 0x218 <lcd_init+0x30>
 218:	00 00       	nop
    delay(LCD_DELAY_INIT); /* delay, busy flag can't be checked here */

    /* repeat last command */
    lcd_e_toggle();
 21a:	0e 94 93 00 	call	0x126	; 0x126 <toggle_e>
 21e:	8f ef       	ldi	r24, 0xFF	; 255
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	01 97       	sbiw	r24, 0x01	; 1
 224:	f1 f7       	brne	.-4      	; 0x222 <lcd_init+0x3a>
 226:	00 c0       	rjmp	.+0      	; 0x228 <lcd_init+0x40>
 228:	00 00       	nop
    delay(LCD_DELAY_INIT_REP); /* delay, busy flag can't be checked here */

    /* repeat last command a third time */
    lcd_e_toggle();
 22a:	0e 94 93 00 	call	0x126	; 0x126 <toggle_e>
 22e:	8f ef       	ldi	r24, 0xFF	; 255
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	01 97       	sbiw	r24, 0x01	; 1
 234:	f1 f7       	brne	.-4      	; 0x232 <lcd_init+0x4a>
 236:	00 c0       	rjmp	.+0      	; 0x238 <lcd_init+0x50>
 238:	00 00       	nop
    delay(LCD_DELAY_INIT_REP); /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN); // LCD_FUNCTION_4BIT_1LINE>>4
 23a:	5c 98       	cbi	0x0b, 4	; 11
    lcd_e_toggle();
 23c:	0e 94 93 00 	call	0x126	; 0x126 <toggle_e>
 240:	8f ef       	ldi	r24, 0xFF	; 255
 242:	90 e0       	ldi	r25, 0x00	; 0
 244:	01 97       	sbiw	r24, 0x01	; 1
 246:	f1 f7       	brne	.-4      	; 0x244 <lcd_init+0x5c>
 248:	00 c0       	rjmp	.+0      	; 0x24a <lcd_init+0x62>
 24a:	00 00       	nop
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
    lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
    lcd_command(KS0073_4LINES_MODE);
    lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
    #else
    lcd_command(LCD_FUNCTION_DEFAULT); /* function set: display lines  */
 24c:	88 e2       	ldi	r24, 0x28	; 40
 24e:	0e 94 ce 00 	call	0x19c	; 0x19c <lcd_command>
    #endif
    lcd_command(LCD_DISP_OFF);     /* display off                  */
 252:	88 e0       	ldi	r24, 0x08	; 8
 254:	0e 94 ce 00 	call	0x19c	; 0x19c <lcd_command>
    lcd_clrscr();                  /* display clear                */
 258:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT); /* set entry mode               */
 25c:	86 e0       	ldi	r24, 0x06	; 6
 25e:	0e 94 ce 00 	call	0x19c	; 0x19c <lcd_command>
    lcd_command(dispAttr);         /* display/cursor control       */
 262:	8c 2f       	mov	r24, r28
 264:	0e 94 ce 00 	call	0x19c	; 0x19c <lcd_command>
}/* lcd_init */
 268:	cf 91       	pop	r28
 26a:	08 95       	ret

0000026c <main>:
*/

int main(void)
{
	
	GPIO_config_output(&DDRC,P_Trigger_Left);			// set PC4 as output
 26c:	64 e0       	ldi	r22, 0x04	; 4
 26e:	87 e2       	ldi	r24, 0x27	; 39
 270:	90 e0       	ldi	r25, 0x00	; 0
 272:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
	GPIO_write_low(&PORTC,P_Trigger_Left);				// set PC4 low
 276:	64 e0       	ldi	r22, 0x04	; 4
 278:	88 e2       	ldi	r24, 0x28	; 40
 27a:	90 e0       	ldi	r25, 0x00	; 0
 27c:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
	GPIO_config_input_nopull(&DDRC,P_Echo_Left);		// set PC5 as input
 280:	65 e0       	ldi	r22, 0x05	; 5
 282:	87 e2       	ldi	r24, 0x27	; 39
 284:	90 e0       	ldi	r25, 0x00	; 0
 286:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_config_input_nopull>
	
	GPIO_config_output(&DDRC,P_Trigger_Right);			// set PC2 as output
 28a:	62 e0       	ldi	r22, 0x02	; 2
 28c:	87 e2       	ldi	r24, 0x27	; 39
 28e:	90 e0       	ldi	r25, 0x00	; 0
 290:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
	GPIO_write_low(&PORTC,P_Trigger_Right);				// set PC2 low
 294:	62 e0       	ldi	r22, 0x02	; 2
 296:	88 e2       	ldi	r24, 0x28	; 40
 298:	90 e0       	ldi	r25, 0x00	; 0
 29a:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
	GPIO_config_input_nopull(&DDRC,P_Echo_Right);		// set PC3 as input
 29e:	63 e0       	ldi	r22, 0x03	; 3
 2a0:	87 e2       	ldi	r24, 0x27	; 39
 2a2:	90 e0       	ldi	r25, 0x00	; 0
 2a4:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_config_input_nopull>
	
	GPIO_config_output(&DDRC,Audio);					// set PC0 as output
 2a8:	60 e0       	ldi	r22, 0x00	; 0
 2aa:	87 e2       	ldi	r24, 0x27	; 39
 2ac:	90 e0       	ldi	r25, 0x00	; 0
 2ae:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
	GPIO_write_low(&PORTC,Audio);						// set PC0 low
 2b2:	60 e0       	ldi	r22, 0x00	; 0
 2b4:	88 e2       	ldi	r24, 0x28	; 40
 2b6:	90 e0       	ldi	r25, 0x00	; 0
 2b8:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
	
	// Configuration all LEDs as output
	GPIO_config_output(&DDRB,PB2);
 2bc:	62 e0       	ldi	r22, 0x02	; 2
 2be:	84 e2       	ldi	r24, 0x24	; 36
 2c0:	90 e0       	ldi	r25, 0x00	; 0
 2c2:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
	GPIO_config_output(&DDRB,PB3);
 2c6:	63 e0       	ldi	r22, 0x03	; 3
 2c8:	84 e2       	ldi	r24, 0x24	; 36
 2ca:	90 e0       	ldi	r25, 0x00	; 0
 2cc:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
	GPIO_config_output(&DDRB,PB4);
 2d0:	64 e0       	ldi	r22, 0x04	; 4
 2d2:	84 e2       	ldi	r24, 0x24	; 36
 2d4:	90 e0       	ldi	r25, 0x00	; 0
 2d6:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
	GPIO_config_output(&DDRB,PB5);
 2da:	65 e0       	ldi	r22, 0x05	; 5
 2dc:	84 e2       	ldi	r24, 0x24	; 36
 2de:	90 e0       	ldi	r25, 0x00	; 0
 2e0:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
	GPIO_config_output(&DDRB,PB6);
 2e4:	66 e0       	ldi	r22, 0x06	; 6
 2e6:	84 e2       	ldi	r24, 0x24	; 36
 2e8:	90 e0       	ldi	r25, 0x00	; 0
 2ea:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>

	GPIO_config_output(&DDRD,PD0);
 2ee:	60 e0       	ldi	r22, 0x00	; 0
 2f0:	8a e2       	ldi	r24, 0x2A	; 42
 2f2:	90 e0       	ldi	r25, 0x00	; 0
 2f4:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
	GPIO_config_output(&DDRD,PD1);
 2f8:	61 e0       	ldi	r22, 0x01	; 1
 2fa:	8a e2       	ldi	r24, 0x2A	; 42
 2fc:	90 e0       	ldi	r25, 0x00	; 0
 2fe:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
	GPIO_config_output(&DDRD,PD2);
 302:	62 e0       	ldi	r22, 0x02	; 2
 304:	8a e2       	ldi	r24, 0x2A	; 42
 306:	90 e0       	ldi	r25, 0x00	; 0
 308:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
	GPIO_config_output(&DDRD,PD3);
 30c:	63 e0       	ldi	r22, 0x03	; 3
 30e:	8a e2       	ldi	r24, 0x2A	; 42
 310:	90 e0       	ldi	r25, 0x00	; 0
 312:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
	GPIO_config_output(&DDRC,PC6);
 316:	66 e0       	ldi	r22, 0x06	; 6
 318:	87 e2       	ldi	r24, 0x27	; 39
 31a:	90 e0       	ldi	r25, 0x00	; 0
 31c:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
	
    // Configure 8-bit Timer/Counter2
    // Enable interrupt and set the overflow prescaler to 16 us
    TIM2_overflow_16us();
 320:	e1 eb       	ldi	r30, 0xB1	; 177
 322:	f0 e0       	ldi	r31, 0x00	; 0
 324:	80 81       	ld	r24, Z
 326:	89 7f       	andi	r24, 0xF9	; 249
 328:	80 83       	st	Z, r24
 32a:	80 81       	ld	r24, Z
 32c:	81 60       	ori	r24, 0x01	; 1
 32e:	80 83       	st	Z, r24
    TIM2_overflow_interrupt_enable();
 330:	e0 e7       	ldi	r30, 0x70	; 112
 332:	f0 e0       	ldi	r31, 0x00	; 0
 334:	80 81       	ld	r24, Z
 336:	81 60       	ori	r24, 0x01	; 1
 338:	80 83       	st	Z, r24
	
    // Configure 16-bit Timer/Counter1
    // Enable interrupt and set the overflow prescaler to 262 ms
    TIM1_overflow_262ms();
 33a:	e1 e8       	ldi	r30, 0x81	; 129
 33c:	f0 e0       	ldi	r31, 0x00	; 0
 33e:	80 81       	ld	r24, Z
 340:	8b 7f       	andi	r24, 0xFB	; 251
 342:	80 83       	st	Z, r24
 344:	80 81       	ld	r24, Z
 346:	83 60       	ori	r24, 0x03	; 3
 348:	80 83       	st	Z, r24
    TIM1_overflow_interrupt_enable();
 34a:	ef e6       	ldi	r30, 0x6F	; 111
 34c:	f0 e0       	ldi	r31, 0x00	; 0
 34e:	80 81       	ld	r24, Z
 350:	81 60       	ori	r24, 0x01	; 1
 352:	80 83       	st	Z, r24

    // Configure 8-bit Timer/Counter0
    // Enable interrupt and set the overflow prescaler to 16 ms
    TIM0_overflow_16ms();
 354:	85 b5       	in	r24, 0x25	; 37
 356:	8d 7f       	andi	r24, 0xFD	; 253
 358:	85 bd       	out	0x25, r24	; 37
 35a:	85 b5       	in	r24, 0x25	; 37
 35c:	85 60       	ori	r24, 0x05	; 5
 35e:	85 bd       	out	0x25, r24	; 37
    TIM0_overflow_interrupt_enable();
 360:	ee e6       	ldi	r30, 0x6E	; 110
 362:	f0 e0       	ldi	r31, 0x00	; 0
 364:	80 81       	ld	r24, Z
 366:	81 60       	ori	r24, 0x01	; 1
 368:	80 83       	st	Z, r24
	
	// Initialize LCD display
	lcd_init(LCD_DISP_ON);
 36a:	8c e0       	ldi	r24, 0x0C	; 12
 36c:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <lcd_init>
	lcd_gotoxy(0,0);
 370:	60 e0       	ldi	r22, 0x00	; 0
 372:	80 e0       	ldi	r24, 0x00	; 0
 374:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <lcd_gotoxy>
	lcd_puts("L Distance in cm:");
 378:	81 e0       	ldi	r24, 0x01	; 1
 37a:	91 e0       	ldi	r25, 0x01	; 1
 37c:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <lcd_puts>
	lcd_gotoxy(0,1);
 380:	61 e0       	ldi	r22, 0x01	; 1
 382:	80 e0       	ldi	r24, 0x00	; 0
 384:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <lcd_gotoxy>
	lcd_puts("R Distance in cm:");
 388:	83 e1       	ldi	r24, 0x13	; 19
 38a:	91 e0       	ldi	r25, 0x01	; 1
 38c:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <lcd_puts>
	
    // Initialize UART to asynchronous, 8N1, 9600
    uart_init(UART_BAUD_SELECT(9600,F_CPU));
 390:	87 e6       	ldi	r24, 0x67	; 103
 392:	90 e0       	ldi	r25, 0x00	; 0
 394:	0e 94 79 05 	call	0xaf2	; 0xaf2 <uart_init>
	
	// Enables interrupts by setting the global interrupt mask
	sei();
 398:	78 94       	sei
			GPIO_write_low(&PORTC,P_Trigger_Left);
			first_High_Left =0;
			Trigger_Left =1;
		}
		
		else if ((GPIO_read(&PINC,P_Echo_Left)==1) & (first_High_Left ==0)) // Reset counter after Echo sends pulse
 39a:	c1 e0       	ldi	r28, 0x01	; 1
	sei();
	
    // Infinite loop
    while (1)
	{	
		if (Trigger_Left == 0) // Send start 10 us pulse to left sensor
 39c:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <Trigger_Left>
 3a0:	81 11       	cpse	r24, r1
 3a2:	1c c0       	rjmp	.+56     	; 0x3dc <main+0x170>
		{
			GPIO_write_low(&PORTC,P_Trigger_Left);
 3a4:	64 e0       	ldi	r22, 0x04	; 4
 3a6:	88 e2       	ldi	r24, 0x28	; 40
 3a8:	90 e0       	ldi	r25, 0x00	; 0
 3aa:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
 3ae:	8a e0       	ldi	r24, 0x0A	; 10
 3b0:	8a 95       	dec	r24
 3b2:	f1 f7       	brne	.-4      	; 0x3b0 <main+0x144>
 3b4:	00 c0       	rjmp	.+0      	; 0x3b6 <main+0x14a>
			_delay_us(2);
			GPIO_write_high(&PORTC,P_Trigger_Left);
 3b6:	64 e0       	ldi	r22, 0x04	; 4
 3b8:	88 e2       	ldi	r24, 0x28	; 40
 3ba:	90 e0       	ldi	r25, 0x00	; 0
 3bc:	0e 94 7d 00 	call	0xfa	; 0xfa <GPIO_write_high>
 3c0:	85 e3       	ldi	r24, 0x35	; 53
 3c2:	8a 95       	dec	r24
 3c4:	f1 f7       	brne	.-4      	; 0x3c2 <main+0x156>
 3c6:	00 00       	nop
			_delay_us(10);
			GPIO_write_low(&PORTC,P_Trigger_Left);
 3c8:	64 e0       	ldi	r22, 0x04	; 4
 3ca:	88 e2       	ldi	r24, 0x28	; 40
 3cc:	90 e0       	ldi	r25, 0x00	; 0
 3ce:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
			first_High_Left =0;
 3d2:	10 92 68 01 	sts	0x0168, r1	; 0x800168 <first_High_Left>
			Trigger_Left =1;
 3d6:	c0 93 69 01 	sts	0x0169, r28	; 0x800169 <Trigger_Left>
 3da:	41 c0       	rjmp	.+130    	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
		}
		
		else if ((GPIO_read(&PINC,P_Echo_Left)==1) & (first_High_Left ==0)) // Reset counter after Echo sends pulse
 3dc:	65 e0       	ldi	r22, 0x05	; 5
 3de:	86 e2       	ldi	r24, 0x26	; 38
 3e0:	90 e0       	ldi	r25, 0x00	; 0
 3e2:	0e 94 89 00 	call	0x112	; 0x112 <GPIO_read>
 3e6:	20 91 68 01 	lds	r18, 0x0168	; 0x800168 <first_High_Left>
 3ea:	9c 2f       	mov	r25, r28
 3ec:	81 30       	cpi	r24, 0x01	; 1
 3ee:	09 f0       	breq	.+2      	; 0x3f2 <main+0x186>
 3f0:	90 e0       	ldi	r25, 0x00	; 0
 3f2:	99 23       	and	r25, r25
 3f4:	61 f0       	breq	.+24     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
 3f6:	8c 2f       	mov	r24, r28
 3f8:	21 11       	cpse	r18, r1
 3fa:	80 e0       	ldi	r24, 0x00	; 0
 3fc:	88 23       	and	r24, r24
 3fe:	39 f0       	breq	.+14     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
		{
			num_of_overflows_Left =0;
 400:	10 92 6d 01 	sts	0x016D, r1	; 0x80016d <num_of_overflows_Left+0x1>
 404:	10 92 6c 01 	sts	0x016C, r1	; 0x80016c <num_of_overflows_Left>
			first_High_Left =1;
 408:	c0 93 68 01 	sts	0x0168, r28	; 0x800168 <first_High_Left>
 40c:	28 c0       	rjmp	.+80     	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
		}
		
		else if ((GPIO_read(&PINC,P_Echo_Left)==0) & (first_High_Left ==1)) // Counter distance after Echo receives pulse
 40e:	65 e0       	ldi	r22, 0x05	; 5
 410:	86 e2       	ldi	r24, 0x26	; 38
 412:	90 e0       	ldi	r25, 0x00	; 0
 414:	0e 94 89 00 	call	0x112	; 0x112 <GPIO_read>
 418:	20 91 68 01 	lds	r18, 0x0168	; 0x800168 <first_High_Left>
 41c:	9c 2f       	mov	r25, r28
 41e:	81 11       	cpse	r24, r1
 420:	90 e0       	ldi	r25, 0x00	; 0
 422:	99 23       	and	r25, r25
 424:	e1 f0       	breq	.+56     	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
 426:	8c 2f       	mov	r24, r28
 428:	21 30       	cpi	r18, 0x01	; 1
 42a:	09 f0       	breq	.+2      	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
 42c:	80 e0       	ldi	r24, 0x00	; 0
 42e:	88 23       	and	r24, r24
 430:	b1 f0       	breq	.+44     	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
		{
			distance_Left =num_of_overflows_Left* 0.2671;
 432:	60 91 6c 01 	lds	r22, 0x016C	; 0x80016c <num_of_overflows_Left>
 436:	70 91 6d 01 	lds	r23, 0x016D	; 0x80016d <num_of_overflows_Left+0x1>
 43a:	80 e0       	ldi	r24, 0x00	; 0
 43c:	90 e0       	ldi	r25, 0x00	; 0
 43e:	0e 94 e5 05 	call	0xbca	; 0xbca <__floatunsisf>
 442:	25 e5       	ldi	r18, 0x55	; 85
 444:	31 ec       	ldi	r19, 0xC1	; 193
 446:	48 e8       	ldi	r20, 0x88	; 136
 448:	5e e3       	ldi	r21, 0x3E	; 62
 44a:	0e 94 4b 06 	call	0xc96	; 0xc96 <__mulsf3>
 44e:	0e 94 b6 05 	call	0xb6c	; 0xb6c <__fixunssfsi>
 452:	70 93 6b 01 	sts	0x016B, r23	; 0x80016b <distance_Left+0x1>
 456:	60 93 6a 01 	sts	0x016A, r22	; 0x80016a <distance_Left>
			Trigger_Left =0;
 45a:	10 92 69 01 	sts	0x0169, r1	; 0x800169 <Trigger_Left>
		}

		if (Trigger_Right == 0)  // Send start 10 us pulse to right sensor
 45e:	80 91 63 01 	lds	r24, 0x0163	; 0x800163 <Trigger_Right>
 462:	81 11       	cpse	r24, r1
 464:	1c c0       	rjmp	.+56     	; 0x49e <__LOCK_REGION_LENGTH__+0x9e>
		{
			GPIO_write_low(&PORTC,P_Trigger_Right);
 466:	62 e0       	ldi	r22, 0x02	; 2
 468:	88 e2       	ldi	r24, 0x28	; 40
 46a:	90 e0       	ldi	r25, 0x00	; 0
 46c:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
 470:	8a e0       	ldi	r24, 0x0A	; 10
 472:	8a 95       	dec	r24
 474:	f1 f7       	brne	.-4      	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
 476:	00 c0       	rjmp	.+0      	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
			_delay_us(2);
			GPIO_write_high(&PORTC,P_Trigger_Right);
 478:	62 e0       	ldi	r22, 0x02	; 2
 47a:	88 e2       	ldi	r24, 0x28	; 40
 47c:	90 e0       	ldi	r25, 0x00	; 0
 47e:	0e 94 7d 00 	call	0xfa	; 0xfa <GPIO_write_high>
 482:	85 e3       	ldi	r24, 0x35	; 53
 484:	8a 95       	dec	r24
 486:	f1 f7       	brne	.-4      	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
 488:	00 00       	nop
			_delay_us(10);
			GPIO_write_low(&PORTC,P_Trigger_Right);
 48a:	62 e0       	ldi	r22, 0x02	; 2
 48c:	88 e2       	ldi	r24, 0x28	; 40
 48e:	90 e0       	ldi	r25, 0x00	; 0
 490:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
			first_High_Right =0;
 494:	10 92 62 01 	sts	0x0162, r1	; 0x800162 <first_High_Right>
			Trigger_Right =1;
 498:	c0 93 63 01 	sts	0x0163, r28	; 0x800163 <Trigger_Right>
 49c:	7f cf       	rjmp	.-258    	; 0x39c <main+0x130>
		}
		
		else if ((GPIO_read(&PINC,P_Echo_Right)==1) & (first_High_Right ==0)) // Reset counter after Echo sends pulse
 49e:	63 e0       	ldi	r22, 0x03	; 3
 4a0:	86 e2       	ldi	r24, 0x26	; 38
 4a2:	90 e0       	ldi	r25, 0x00	; 0
 4a4:	0e 94 89 00 	call	0x112	; 0x112 <GPIO_read>
 4a8:	20 91 62 01 	lds	r18, 0x0162	; 0x800162 <first_High_Right>
 4ac:	9c 2f       	mov	r25, r28
 4ae:	81 30       	cpi	r24, 0x01	; 1
 4b0:	09 f0       	breq	.+2      	; 0x4b4 <__LOCK_REGION_LENGTH__+0xb4>
 4b2:	90 e0       	ldi	r25, 0x00	; 0
 4b4:	99 23       	and	r25, r25
 4b6:	61 f0       	breq	.+24     	; 0x4d0 <__LOCK_REGION_LENGTH__+0xd0>
 4b8:	8c 2f       	mov	r24, r28
 4ba:	21 11       	cpse	r18, r1
 4bc:	80 e0       	ldi	r24, 0x00	; 0
 4be:	88 23       	and	r24, r24
 4c0:	39 f0       	breq	.+14     	; 0x4d0 <__LOCK_REGION_LENGTH__+0xd0>
		{
			num_of_overflows_Right =0;
 4c2:	10 92 67 01 	sts	0x0167, r1	; 0x800167 <num_of_overflows_Right+0x1>
 4c6:	10 92 66 01 	sts	0x0166, r1	; 0x800166 <num_of_overflows_Right>
			first_High_Right =1;
 4ca:	c0 93 62 01 	sts	0x0162, r28	; 0x800162 <first_High_Right>
 4ce:	66 cf       	rjmp	.-308    	; 0x39c <main+0x130>
		}
		
		else if ((GPIO_read(&PINC,P_Echo_Right)==0) & (first_High_Right ==1)) // Counter distance after Echo receives pulse 
 4d0:	63 e0       	ldi	r22, 0x03	; 3
 4d2:	86 e2       	ldi	r24, 0x26	; 38
 4d4:	90 e0       	ldi	r25, 0x00	; 0
 4d6:	0e 94 89 00 	call	0x112	; 0x112 <GPIO_read>
 4da:	20 91 62 01 	lds	r18, 0x0162	; 0x800162 <first_High_Right>
 4de:	9c 2f       	mov	r25, r28
 4e0:	81 11       	cpse	r24, r1
 4e2:	90 e0       	ldi	r25, 0x00	; 0
 4e4:	99 23       	and	r25, r25
 4e6:	09 f4       	brne	.+2      	; 0x4ea <__LOCK_REGION_LENGTH__+0xea>
 4e8:	59 cf       	rjmp	.-334    	; 0x39c <main+0x130>
 4ea:	8c 2f       	mov	r24, r28
 4ec:	21 30       	cpi	r18, 0x01	; 1
 4ee:	09 f0       	breq	.+2      	; 0x4f2 <__LOCK_REGION_LENGTH__+0xf2>
 4f0:	80 e0       	ldi	r24, 0x00	; 0
 4f2:	88 23       	and	r24, r24
 4f4:	09 f4       	brne	.+2      	; 0x4f8 <__LOCK_REGION_LENGTH__+0xf8>
 4f6:	52 cf       	rjmp	.-348    	; 0x39c <main+0x130>
		{
			distance_Right =num_of_overflows_Right* 0.2671;
 4f8:	60 91 66 01 	lds	r22, 0x0166	; 0x800166 <num_of_overflows_Right>
 4fc:	70 91 67 01 	lds	r23, 0x0167	; 0x800167 <num_of_overflows_Right+0x1>
 500:	80 e0       	ldi	r24, 0x00	; 0
 502:	90 e0       	ldi	r25, 0x00	; 0
 504:	0e 94 e5 05 	call	0xbca	; 0xbca <__floatunsisf>
 508:	25 e5       	ldi	r18, 0x55	; 85
 50a:	31 ec       	ldi	r19, 0xC1	; 193
 50c:	48 e8       	ldi	r20, 0x88	; 136
 50e:	5e e3       	ldi	r21, 0x3E	; 62
 510:	0e 94 4b 06 	call	0xc96	; 0xc96 <__mulsf3>
 514:	0e 94 b6 05 	call	0xb6c	; 0xb6c <__fixunssfsi>
 518:	70 93 65 01 	sts	0x0165, r23	; 0x800165 <distance_Right+0x1>
 51c:	60 93 64 01 	sts	0x0164, r22	; 0x800164 <distance_Right>
			Trigger_Right =0;
 520:	10 92 63 01 	sts	0x0163, r1	; 0x800163 <Trigger_Right>
 524:	3b cf       	rjmp	.-394    	; 0x39c <main+0x130>

00000526 <__vector_9>:
* measuring time => one overflow is 16 us
* audio output frequency setting
*/

ISR(TIMER2_OVF_vect)
{
 526:	1f 92       	push	r1
 528:	0f 92       	push	r0
 52a:	0f b6       	in	r0, 0x3f	; 63
 52c:	0f 92       	push	r0
 52e:	11 24       	eor	r1, r1
 530:	2f 93       	push	r18
 532:	3f 93       	push	r19
 534:	4f 93       	push	r20
 536:	5f 93       	push	r21
 538:	6f 93       	push	r22
 53a:	7f 93       	push	r23
 53c:	8f 93       	push	r24
 53e:	9f 93       	push	r25
 540:	af 93       	push	r26
 542:	bf 93       	push	r27
 544:	ef 93       	push	r30
 546:	ff 93       	push	r31
	static uint8_t distance =0;
	static uint16_t freq_counter =0;
	freq_counter ++;
 548:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <freq_counter.2123>
 54c:	90 91 61 01 	lds	r25, 0x0161	; 0x800161 <freq_counter.2123+0x1>
 550:	01 96       	adiw	r24, 0x01	; 1
 552:	90 93 61 01 	sts	0x0161, r25	; 0x800161 <freq_counter.2123+0x1>
 556:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <freq_counter.2123>
	
	num_of_overflows_Left ++;
 55a:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <num_of_overflows_Left>
 55e:	90 91 6d 01 	lds	r25, 0x016D	; 0x80016d <num_of_overflows_Left+0x1>
 562:	01 96       	adiw	r24, 0x01	; 1
 564:	90 93 6d 01 	sts	0x016D, r25	; 0x80016d <num_of_overflows_Left+0x1>
 568:	80 93 6c 01 	sts	0x016C, r24	; 0x80016c <num_of_overflows_Left>
	num_of_overflows_Right ++;
 56c:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <num_of_overflows_Right>
 570:	90 91 67 01 	lds	r25, 0x0167	; 0x800167 <num_of_overflows_Right+0x1>
 574:	01 96       	adiw	r24, 0x01	; 1
 576:	90 93 67 01 	sts	0x0167, r25	; 0x800167 <num_of_overflows_Right+0x1>
 57a:	80 93 66 01 	sts	0x0166, r24	; 0x800166 <num_of_overflows_Right>
	
	GPIO_write_low(&PORTC,Audio);
 57e:	60 e0       	ldi	r22, 0x00	; 0
 580:	88 e2       	ldi	r24, 0x28	; 40
 582:	90 e0       	ldi	r25, 0x00	; 0
 584:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
	
	// Frequency setting for the shortest distance only
	if (distance_Left > distance_Right)
 588:	20 91 6a 01 	lds	r18, 0x016A	; 0x80016a <distance_Left>
 58c:	30 91 6b 01 	lds	r19, 0x016B	; 0x80016b <distance_Left+0x1>
 590:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <distance_Right>
 594:	90 91 65 01 	lds	r25, 0x0165	; 0x800165 <distance_Right+0x1>
 598:	82 17       	cp	r24, r18
 59a:	93 07       	cpc	r25, r19
 59c:	38 f4       	brcc	.+14     	; 0x5ac <__vector_9+0x86>
	{
		distance = distance_Right;
 59e:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <distance_Right>
 5a2:	90 91 65 01 	lds	r25, 0x0165	; 0x800165 <distance_Right+0x1>
 5a6:	80 93 5f 01 	sts	0x015F, r24	; 0x80015f <distance.2122>
 5aa:	06 c0       	rjmp	.+12     	; 0x5b8 <__vector_9+0x92>
	}
	else
	{
		distance = distance_Left;
 5ac:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <distance_Left>
 5b0:	90 91 6b 01 	lds	r25, 0x016B	; 0x80016b <distance_Left+0x1>
 5b4:	80 93 5f 01 	sts	0x015F, r24	; 0x80015f <distance.2122>
	}
	
	// Frequency setting depending on distance
	if (distance  <= 100 && distance > 50)
 5b8:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <distance.2122>
 5bc:	9d ec       	ldi	r25, 0xCD	; 205
 5be:	98 0f       	add	r25, r24
 5c0:	92 33       	cpi	r25, 0x32	; 50
 5c2:	90 f4       	brcc	.+36     	; 0x5e8 <__vector_9+0xc2>
	{
		if (freq_counter == 188)
 5c4:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <freq_counter.2123>
 5c8:	90 91 61 01 	lds	r25, 0x0161	; 0x800161 <freq_counter.2123+0x1>
 5cc:	8c 3b       	cpi	r24, 0xBC	; 188
 5ce:	91 05       	cpc	r25, r1
 5d0:	09 f0       	breq	.+2      	; 0x5d4 <__vector_9+0xae>
 5d2:	43 c0       	rjmp	.+134    	; 0x65a <__vector_9+0x134>
		{
			freq_counter =0;
 5d4:	10 92 61 01 	sts	0x0161, r1	; 0x800161 <freq_counter.2123+0x1>
 5d8:	10 92 60 01 	sts	0x0160, r1	; 0x800160 <freq_counter.2123>
			GPIO_write_high(&PORTC,Audio);
 5dc:	60 e0       	ldi	r22, 0x00	; 0
 5de:	88 e2       	ldi	r24, 0x28	; 40
 5e0:	90 e0       	ldi	r25, 0x00	; 0
 5e2:	0e 94 7d 00 	call	0xfa	; 0xfa <GPIO_write_high>
 5e6:	39 c0       	rjmp	.+114    	; 0x65a <__vector_9+0x134>
		}
	}
	else if (distance <= 50 && distance > 10 )
 5e8:	95 ef       	ldi	r25, 0xF5	; 245
 5ea:	98 0f       	add	r25, r24
 5ec:	98 32       	cpi	r25, 0x28	; 40
 5ee:	80 f4       	brcc	.+32     	; 0x610 <__vector_9+0xea>
	{
		if (freq_counter == 38)
 5f0:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <freq_counter.2123>
 5f4:	90 91 61 01 	lds	r25, 0x0161	; 0x800161 <freq_counter.2123+0x1>
 5f8:	86 97       	sbiw	r24, 0x26	; 38
 5fa:	79 f5       	brne	.+94     	; 0x65a <__vector_9+0x134>
		{
			GPIO_write_high(&PORTC,Audio);
 5fc:	60 e0       	ldi	r22, 0x00	; 0
 5fe:	88 e2       	ldi	r24, 0x28	; 40
 600:	90 e0       	ldi	r25, 0x00	; 0
 602:	0e 94 7d 00 	call	0xfa	; 0xfa <GPIO_write_high>
			freq_counter =0;
 606:	10 92 61 01 	sts	0x0161, r1	; 0x800161 <freq_counter.2123+0x1>
 60a:	10 92 60 01 	sts	0x0160, r1	; 0x800160 <freq_counter.2123>
 60e:	25 c0       	rjmp	.+74     	; 0x65a <__vector_9+0x134>
		}
	}
	else if (distance <= 10 &&distance > 2)
 610:	9d ef       	ldi	r25, 0xFD	; 253
 612:	98 0f       	add	r25, r24
 614:	98 30       	cpi	r25, 0x08	; 8
 616:	80 f4       	brcc	.+32     	; 0x638 <__vector_9+0x112>
	{
		if (freq_counter == 8)
 618:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <freq_counter.2123>
 61c:	90 91 61 01 	lds	r25, 0x0161	; 0x800161 <freq_counter.2123+0x1>
 620:	08 97       	sbiw	r24, 0x08	; 8
 622:	d9 f4       	brne	.+54     	; 0x65a <__vector_9+0x134>
		{
			GPIO_write_high(&PORTC,Audio);
 624:	60 e0       	ldi	r22, 0x00	; 0
 626:	88 e2       	ldi	r24, 0x28	; 40
 628:	90 e0       	ldi	r25, 0x00	; 0
 62a:	0e 94 7d 00 	call	0xfa	; 0xfa <GPIO_write_high>
			freq_counter =0;
 62e:	10 92 61 01 	sts	0x0161, r1	; 0x800161 <freq_counter.2123+0x1>
 632:	10 92 60 01 	sts	0x0160, r1	; 0x800160 <freq_counter.2123>
 636:	11 c0       	rjmp	.+34     	; 0x65a <__vector_9+0x134>
		}
	}
	else if (distance <= 2)
 638:	83 30       	cpi	r24, 0x03	; 3
 63a:	78 f4       	brcc	.+30     	; 0x65a <__vector_9+0x134>
	{
		if (freq_counter == 5)
 63c:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <freq_counter.2123>
 640:	90 91 61 01 	lds	r25, 0x0161	; 0x800161 <freq_counter.2123+0x1>
 644:	05 97       	sbiw	r24, 0x05	; 5
 646:	49 f4       	brne	.+18     	; 0x65a <__vector_9+0x134>
		{
			GPIO_write_high(&PORTC,Audio);
 648:	60 e0       	ldi	r22, 0x00	; 0
 64a:	88 e2       	ldi	r24, 0x28	; 40
 64c:	90 e0       	ldi	r25, 0x00	; 0
 64e:	0e 94 7d 00 	call	0xfa	; 0xfa <GPIO_write_high>
			freq_counter =0;
 652:	10 92 61 01 	sts	0x0161, r1	; 0x800161 <freq_counter.2123+0x1>
 656:	10 92 60 01 	sts	0x0160, r1	; 0x800160 <freq_counter.2123>
		}
	}	
}
 65a:	ff 91       	pop	r31
 65c:	ef 91       	pop	r30
 65e:	bf 91       	pop	r27
 660:	af 91       	pop	r26
 662:	9f 91       	pop	r25
 664:	8f 91       	pop	r24
 666:	7f 91       	pop	r23
 668:	6f 91       	pop	r22
 66a:	5f 91       	pop	r21
 66c:	4f 91       	pop	r20
 66e:	3f 91       	pop	r19
 670:	2f 91       	pop	r18
 672:	0f 90       	pop	r0
 674:	0f be       	out	0x3f, r0	; 63
 676:	0f 90       	pop	r0
 678:	1f 90       	pop	r1
 67a:	18 95       	reti

0000067c <__vector_13>:
* Display distance value on display
* Controlling the LED bar
*/

ISR(TIMER1_OVF_vect)
{
 67c:	1f 92       	push	r1
 67e:	0f 92       	push	r0
 680:	0f b6       	in	r0, 0x3f	; 63
 682:	0f 92       	push	r0
 684:	11 24       	eor	r1, r1
 686:	2f 93       	push	r18
 688:	3f 93       	push	r19
 68a:	4f 93       	push	r20
 68c:	5f 93       	push	r21
 68e:	6f 93       	push	r22
 690:	7f 93       	push	r23
 692:	8f 93       	push	r24
 694:	9f 93       	push	r25
 696:	af 93       	push	r26
 698:	bf 93       	push	r27
 69a:	ef 93       	push	r30
 69c:	ff 93       	push	r31
 69e:	cf 93       	push	r28
 6a0:	df 93       	push	r29
 6a2:	00 d0       	rcall	.+0      	; 0x6a4 <__vector_13+0x28>
 6a4:	1f 92       	push	r1
 6a6:	cd b7       	in	r28, 0x3d	; 61
 6a8:	de b7       	in	r29, 0x3e	; 62
	char char_distance_Left[3];
	static uint8_t old_distance_Left = 0;
	static uint8_t counter1 =0; 
	counter1 ++;
 6aa:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <counter1.2131>
 6ae:	8f 5f       	subi	r24, 0xFF	; 255
 6b0:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <counter1.2131>
	if ((distance_Left != old_distance_Left) & (counter1 ==1))
 6b4:	20 91 5d 01 	lds	r18, 0x015D	; 0x80015d <old_distance_Left.2130>
 6b8:	30 e0       	ldi	r19, 0x00	; 0
 6ba:	40 91 6a 01 	lds	r20, 0x016A	; 0x80016a <distance_Left>
 6be:	50 91 6b 01 	lds	r21, 0x016B	; 0x80016b <distance_Left+0x1>
 6c2:	91 e0       	ldi	r25, 0x01	; 1
 6c4:	81 30       	cpi	r24, 0x01	; 1
 6c6:	09 f0       	breq	.+2      	; 0x6ca <__vector_13+0x4e>
 6c8:	90 e0       	ldi	r25, 0x00	; 0
 6ca:	81 e0       	ldi	r24, 0x01	; 1
 6cc:	24 17       	cp	r18, r20
 6ce:	35 07       	cpc	r19, r21
 6d0:	09 f4       	brne	.+2      	; 0x6d4 <__vector_13+0x58>
 6d2:	80 e0       	ldi	r24, 0x00	; 0
 6d4:	88 23       	and	r24, r24
 6d6:	09 f4       	brne	.+2      	; 0x6da <__vector_13+0x5e>
 6d8:	92 c0       	rjmp	.+292    	; 0x7fe <__vector_13+0x182>
 6da:	99 23       	and	r25, r25
 6dc:	09 f4       	brne	.+2      	; 0x6e0 <__vector_13+0x64>
 6de:	8f c0       	rjmp	.+286    	; 0x7fe <__vector_13+0x182>
	{
		counter1 =0;
 6e0:	10 92 5e 01 	sts	0x015E, r1	; 0x80015e <counter1.2131>
		if (distance_Left >= 400){distance_Left =400;}
 6e4:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <distance_Left>
 6e8:	90 91 6b 01 	lds	r25, 0x016B	; 0x80016b <distance_Left+0x1>
 6ec:	80 39       	cpi	r24, 0x90	; 144
 6ee:	91 40       	sbci	r25, 0x01	; 1
 6f0:	30 f0       	brcs	.+12     	; 0x6fe <__vector_13+0x82>
 6f2:	80 e9       	ldi	r24, 0x90	; 144
 6f4:	91 e0       	ldi	r25, 0x01	; 1
 6f6:	90 93 6b 01 	sts	0x016B, r25	; 0x80016b <distance_Left+0x1>
 6fa:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <distance_Left>
		if (distance_Left <= 2){distance_Left =2;}
 6fe:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <distance_Left>
 702:	90 91 6b 01 	lds	r25, 0x016B	; 0x80016b <distance_Left+0x1>
 706:	03 97       	sbiw	r24, 0x03	; 3
 708:	30 f4       	brcc	.+12     	; 0x716 <__vector_13+0x9a>
 70a:	82 e0       	ldi	r24, 0x02	; 2
 70c:	90 e0       	ldi	r25, 0x00	; 0
 70e:	90 93 6b 01 	sts	0x016B, r25	; 0x80016b <distance_Left+0x1>
 712:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <distance_Left>
			
		itoa(distance_Left,char_distance_Left,10);
 716:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <distance_Left>
 71a:	90 91 6b 01 	lds	r25, 0x016B	; 0x80016b <distance_Left+0x1>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 71e:	4a e0       	ldi	r20, 0x0A	; 10
 720:	be 01       	movw	r22, r28
 722:	6f 5f       	subi	r22, 0xFF	; 255
 724:	7f 4f       	sbci	r23, 0xFF	; 255
 726:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <__itoa_ncheck>
		
		// Display distance on LCD
		lcd_gotoxy(17,0);
 72a:	60 e0       	ldi	r22, 0x00	; 0
 72c:	81 e1       	ldi	r24, 0x11	; 17
 72e:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <lcd_gotoxy>
		lcd_puts("    ");
 732:	85 e2       	ldi	r24, 0x25	; 37
 734:	91 e0       	ldi	r25, 0x01	; 1
 736:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <lcd_puts>
		lcd_gotoxy(17,0);
 73a:	60 e0       	ldi	r22, 0x00	; 0
 73c:	81 e1       	ldi	r24, 0x11	; 17
 73e:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <lcd_gotoxy>
		lcd_puts(char_distance_Left);
 742:	ce 01       	movw	r24, r28
 744:	01 96       	adiw	r24, 0x01	; 1
 746:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <lcd_puts>
		
		// Send distance to uart
		uart_puts(" Left distance in cm: ");
 74a:	8a e2       	ldi	r24, 0x2A	; 42
 74c:	91 e0       	ldi	r25, 0x01	; 1
 74e:	0e 94 a7 05 	call	0xb4e	; 0xb4e <uart_puts>
		uart_puts(char_distance_Left);
 752:	ce 01       	movw	r24, r28
 754:	01 96       	adiw	r24, 0x01	; 1
 756:	0e 94 a7 05 	call	0xb4e	; 0xb4e <uart_puts>
		uart_puts("\n\r");
 75a:	81 e4       	ldi	r24, 0x41	; 65
 75c:	91 e0       	ldi	r25, 0x01	; 1
 75e:	0e 94 a7 05 	call	0xb4e	; 0xb4e <uart_puts>
		old_distance_Left = distance_Left;
 762:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <distance_Left>
 766:	90 91 6b 01 	lds	r25, 0x016B	; 0x80016b <distance_Left+0x1>
 76a:	80 93 5d 01 	sts	0x015D, r24	; 0x80015d <old_distance_Left.2130>
		
		// Setting the LED bar depending on the distance
		if (distance_Left >= 400)
 76e:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <distance_Left>
 772:	90 91 6b 01 	lds	r25, 0x016B	; 0x80016b <distance_Left+0x1>
 776:	80 39       	cpi	r24, 0x90	; 144
 778:	91 40       	sbci	r25, 0x01	; 1
 77a:	20 f0       	brcs	.+8      	; 0x784 <__vector_13+0x108>
		{
			PORTB &= ~((1<<PB2)|(1<<PB3)|(1<<PB4)|(1<<PB5)|(1<<PB6));
 77c:	85 b1       	in	r24, 0x05	; 5
 77e:	83 78       	andi	r24, 0x83	; 131
 780:	85 b9       	out	0x05, r24	; 5
 782:	54 c0       	rjmp	.+168    	; 0x82c <__vector_13+0x1b0>
		}
		else if (distance_Left >= 300)
 784:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <distance_Left>
 788:	90 91 6b 01 	lds	r25, 0x016B	; 0x80016b <distance_Left+0x1>
 78c:	8c 32       	cpi	r24, 0x2C	; 44
 78e:	91 40       	sbci	r25, 0x01	; 1
 790:	28 f0       	brcs	.+10     	; 0x79c <__vector_13+0x120>
		{
			PORTB &= ~((1<<PB3)|(1<<PB4)|(1<<PB5)|(1<<PB6)); PORTB |=(1<<PB2);
 792:	85 b1       	in	r24, 0x05	; 5
 794:	87 78       	andi	r24, 0x87	; 135
 796:	85 b9       	out	0x05, r24	; 5
 798:	2a 9a       	sbi	0x05, 2	; 5
 79a:	48 c0       	rjmp	.+144    	; 0x82c <__vector_13+0x1b0>
		}
		else if (distance_Left >= 200)
 79c:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <distance_Left>
 7a0:	90 91 6b 01 	lds	r25, 0x016B	; 0x80016b <distance_Left+0x1>
 7a4:	88 3c       	cpi	r24, 0xC8	; 200
 7a6:	91 05       	cpc	r25, r1
 7a8:	38 f0       	brcs	.+14     	; 0x7b8 <__vector_13+0x13c>
		{
			PORTB &= ~((1<<PB4)|(1<<PB5)|(1<<PB6)); PORTB |=((1<<PB2)|(1<<PB3));	
 7aa:	85 b1       	in	r24, 0x05	; 5
 7ac:	8f 78       	andi	r24, 0x8F	; 143
 7ae:	85 b9       	out	0x05, r24	; 5
 7b0:	85 b1       	in	r24, 0x05	; 5
 7b2:	8c 60       	ori	r24, 0x0C	; 12
 7b4:	85 b9       	out	0x05, r24	; 5
 7b6:	3a c0       	rjmp	.+116    	; 0x82c <__vector_13+0x1b0>
		}
		else if (distance_Left >= 100)
 7b8:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <distance_Left>
 7bc:	90 91 6b 01 	lds	r25, 0x016B	; 0x80016b <distance_Left+0x1>
 7c0:	84 36       	cpi	r24, 0x64	; 100
 7c2:	91 05       	cpc	r25, r1
 7c4:	38 f0       	brcs	.+14     	; 0x7d4 <__vector_13+0x158>
		{
			PORTB &= ~((1<<PB5)|(1<<PB6)); PORTB |=((1<<PB2)|(1<<PB3)|(1<<PB4));
 7c6:	85 b1       	in	r24, 0x05	; 5
 7c8:	8f 79       	andi	r24, 0x9F	; 159
 7ca:	85 b9       	out	0x05, r24	; 5
 7cc:	85 b1       	in	r24, 0x05	; 5
 7ce:	8c 61       	ori	r24, 0x1C	; 28
 7d0:	85 b9       	out	0x05, r24	; 5
 7d2:	2c c0       	rjmp	.+88     	; 0x82c <__vector_13+0x1b0>
		}
		else if (distance_Left >= 50)
 7d4:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <distance_Left>
 7d8:	90 91 6b 01 	lds	r25, 0x016B	; 0x80016b <distance_Left+0x1>
 7dc:	c2 97       	sbiw	r24, 0x32	; 50
 7de:	28 f0       	brcs	.+10     	; 0x7ea <__vector_13+0x16e>
		{
			PORTB &= ~(1<<PB6); PORTB |=((1<<PB2)|(1<<PB3)|(1<<PB4)|(1<<PB5));
 7e0:	2e 98       	cbi	0x05, 6	; 5
 7e2:	85 b1       	in	r24, 0x05	; 5
 7e4:	8c 63       	ori	r24, 0x3C	; 60
 7e6:	85 b9       	out	0x05, r24	; 5
 7e8:	21 c0       	rjmp	.+66     	; 0x82c <__vector_13+0x1b0>
		}
		else if (distance_Left >= 2)
 7ea:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <distance_Left>
 7ee:	90 91 6b 01 	lds	r25, 0x016B	; 0x80016b <distance_Left+0x1>
 7f2:	02 97       	sbiw	r24, 0x02	; 2
 7f4:	d8 f0       	brcs	.+54     	; 0x82c <__vector_13+0x1b0>
		{
			PORTB |=((1<<PB2)|(1<<PB3)|(1<<PB4)|(1<<PB5)|(1<<PB6));
 7f6:	85 b1       	in	r24, 0x05	; 5
 7f8:	8c 67       	ori	r24, 0x7C	; 124
 7fa:	85 b9       	out	0x05, r24	; 5
 7fc:	17 c0       	rjmp	.+46     	; 0x82c <__vector_13+0x1b0>
		}
	}
	
	// Prevents freezing at distance < 10 cm
	else if ((distance_Left == old_distance_Left )&(counter1 ==1))
 7fe:	40 91 6a 01 	lds	r20, 0x016A	; 0x80016a <distance_Left>
 802:	50 91 6b 01 	lds	r21, 0x016B	; 0x80016b <distance_Left+0x1>
 806:	81 e0       	ldi	r24, 0x01	; 1
 808:	24 17       	cp	r18, r20
 80a:	35 07       	cpc	r19, r21
 80c:	09 f0       	breq	.+2      	; 0x810 <__vector_13+0x194>
 80e:	80 e0       	ldi	r24, 0x00	; 0
 810:	88 23       	and	r24, r24
 812:	61 f0       	breq	.+24     	; 0x82c <__vector_13+0x1b0>
 814:	99 23       	and	r25, r25
 816:	51 f0       	breq	.+20     	; 0x82c <__vector_13+0x1b0>
	{
		Trigger_Left =0;
 818:	10 92 69 01 	sts	0x0169, r1	; 0x800169 <Trigger_Left>
		distance_Left =2;
 81c:	82 e0       	ldi	r24, 0x02	; 2
 81e:	90 e0       	ldi	r25, 0x00	; 0
 820:	90 93 6b 01 	sts	0x016B, r25	; 0x80016b <distance_Left+0x1>
 824:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <distance_Left>
		counter1 =0;
 828:	10 92 5e 01 	sts	0x015E, r1	; 0x80015e <counter1.2131>
	}

}
 82c:	0f 90       	pop	r0
 82e:	0f 90       	pop	r0
 830:	0f 90       	pop	r0
 832:	df 91       	pop	r29
 834:	cf 91       	pop	r28
 836:	ff 91       	pop	r31
 838:	ef 91       	pop	r30
 83a:	bf 91       	pop	r27
 83c:	af 91       	pop	r26
 83e:	9f 91       	pop	r25
 840:	8f 91       	pop	r24
 842:	7f 91       	pop	r23
 844:	6f 91       	pop	r22
 846:	5f 91       	pop	r21
 848:	4f 91       	pop	r20
 84a:	3f 91       	pop	r19
 84c:	2f 91       	pop	r18
 84e:	0f 90       	pop	r0
 850:	0f be       	out	0x3f, r0	; 63
 852:	0f 90       	pop	r0
 854:	1f 90       	pop	r1
 856:	18 95       	reti

00000858 <__vector_16>:
* send distance from right sensor to uart
* Display distance value on display
* Controlling the LED bar
*/
ISR(TIMER0_OVF_vect)
{
 858:	1f 92       	push	r1
 85a:	0f 92       	push	r0
 85c:	0f b6       	in	r0, 0x3f	; 63
 85e:	0f 92       	push	r0
 860:	11 24       	eor	r1, r1
 862:	2f 93       	push	r18
 864:	3f 93       	push	r19
 866:	4f 93       	push	r20
 868:	5f 93       	push	r21
 86a:	6f 93       	push	r22
 86c:	7f 93       	push	r23
 86e:	8f 93       	push	r24
 870:	9f 93       	push	r25
 872:	af 93       	push	r26
 874:	bf 93       	push	r27
 876:	ef 93       	push	r30
 878:	ff 93       	push	r31
 87a:	cf 93       	push	r28
 87c:	df 93       	push	r29
 87e:	00 d0       	rcall	.+0      	; 0x880 <__vector_16+0x28>
 880:	1f 92       	push	r1
 882:	cd b7       	in	r28, 0x3d	; 61
 884:	de b7       	in	r29, 0x3e	; 62
	char char_distance_Right[3];
	static uint8_t old_distance_Right = 1;
	static uint8_t counter0 = 0;
	counter0 ++;
 886:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <__data_end>
 88a:	8f 5f       	subi	r24, 0xFF	; 255
 88c:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <__data_end>
	if ((counter0 ==16) &(old_distance_Right != distance_Right))
 890:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 894:	30 e0       	ldi	r19, 0x00	; 0
 896:	40 91 64 01 	lds	r20, 0x0164	; 0x800164 <distance_Right>
 89a:	50 91 65 01 	lds	r21, 0x0165	; 0x800165 <distance_Right+0x1>
 89e:	91 e0       	ldi	r25, 0x01	; 1
 8a0:	80 31       	cpi	r24, 0x10	; 16
 8a2:	09 f0       	breq	.+2      	; 0x8a6 <__vector_16+0x4e>
 8a4:	90 e0       	ldi	r25, 0x00	; 0
 8a6:	99 23       	and	r25, r25
 8a8:	09 f4       	brne	.+2      	; 0x8ac <__vector_16+0x54>
 8aa:	9a c0       	rjmp	.+308    	; 0x9e0 <__stack+0xe1>
 8ac:	91 e0       	ldi	r25, 0x01	; 1
 8ae:	24 17       	cp	r18, r20
 8b0:	35 07       	cpc	r19, r21
 8b2:	09 f4       	brne	.+2      	; 0x8b6 <__vector_16+0x5e>
 8b4:	90 e0       	ldi	r25, 0x00	; 0
 8b6:	99 23       	and	r25, r25
 8b8:	09 f4       	brne	.+2      	; 0x8bc <__vector_16+0x64>
 8ba:	92 c0       	rjmp	.+292    	; 0x9e0 <__stack+0xe1>
	{
		counter0 =0;
 8bc:	10 92 5c 01 	sts	0x015C, r1	; 0x80015c <__data_end>
		if (distance_Right >= 400){distance_Right =400;}
 8c0:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <distance_Right>
 8c4:	90 91 65 01 	lds	r25, 0x0165	; 0x800165 <distance_Right+0x1>
 8c8:	80 39       	cpi	r24, 0x90	; 144
 8ca:	91 40       	sbci	r25, 0x01	; 1
 8cc:	30 f0       	brcs	.+12     	; 0x8da <__vector_16+0x82>
 8ce:	80 e9       	ldi	r24, 0x90	; 144
 8d0:	91 e0       	ldi	r25, 0x01	; 1
 8d2:	90 93 65 01 	sts	0x0165, r25	; 0x800165 <distance_Right+0x1>
 8d6:	80 93 64 01 	sts	0x0164, r24	; 0x800164 <distance_Right>
		if (distance_Right <= 2){distance_Right =2;}
 8da:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <distance_Right>
 8de:	90 91 65 01 	lds	r25, 0x0165	; 0x800165 <distance_Right+0x1>
 8e2:	03 97       	sbiw	r24, 0x03	; 3
 8e4:	30 f4       	brcc	.+12     	; 0x8f2 <__vector_16+0x9a>
 8e6:	82 e0       	ldi	r24, 0x02	; 2
 8e8:	90 e0       	ldi	r25, 0x00	; 0
 8ea:	90 93 65 01 	sts	0x0165, r25	; 0x800165 <distance_Right+0x1>
 8ee:	80 93 64 01 	sts	0x0164, r24	; 0x800164 <distance_Right>
			
		itoa(distance_Right,char_distance_Right,10);
 8f2:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <distance_Right>
 8f6:	90 91 65 01 	lds	r25, 0x0165	; 0x800165 <distance_Right+0x1>
 8fa:	4a e0       	ldi	r20, 0x0A	; 10
 8fc:	be 01       	movw	r22, r28
 8fe:	6f 5f       	subi	r22, 0xFF	; 255
 900:	7f 4f       	sbci	r23, 0xFF	; 255
 902:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <__itoa_ncheck>
		
		// Display distance on LCD
		lcd_gotoxy(17,1);
 906:	61 e0       	ldi	r22, 0x01	; 1
 908:	81 e1       	ldi	r24, 0x11	; 17
 90a:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <lcd_gotoxy>
		lcd_puts("    ");
 90e:	85 e2       	ldi	r24, 0x25	; 37
 910:	91 e0       	ldi	r25, 0x01	; 1
 912:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <lcd_puts>
		lcd_gotoxy(17,1);
 916:	61 e0       	ldi	r22, 0x01	; 1
 918:	81 e1       	ldi	r24, 0x11	; 17
 91a:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <lcd_gotoxy>
		lcd_puts(char_distance_Right);
 91e:	ce 01       	movw	r24, r28
 920:	01 96       	adiw	r24, 0x01	; 1
 922:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <lcd_puts>
		
		// Send distance to uart
		uart_puts("Right distance in cm: ");
 926:	84 e4       	ldi	r24, 0x44	; 68
 928:	91 e0       	ldi	r25, 0x01	; 1
 92a:	0e 94 a7 05 	call	0xb4e	; 0xb4e <uart_puts>
		uart_puts(char_distance_Right);
 92e:	ce 01       	movw	r24, r28
 930:	01 96       	adiw	r24, 0x01	; 1
 932:	0e 94 a7 05 	call	0xb4e	; 0xb4e <uart_puts>
		uart_puts("\n\r");
 936:	81 e4       	ldi	r24, 0x41	; 65
 938:	91 e0       	ldi	r25, 0x01	; 1
 93a:	0e 94 a7 05 	call	0xb4e	; 0xb4e <uart_puts>
		old_distance_Right = distance_Right;
 93e:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <distance_Right>
 942:	90 91 65 01 	lds	r25, 0x0165	; 0x800165 <distance_Right+0x1>
 946:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
		
		// Setting the LED bar depending on the distance
		if (distance_Right >= 400)
 94a:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <distance_Right>
 94e:	90 91 65 01 	lds	r25, 0x0165	; 0x800165 <distance_Right+0x1>
 952:	80 39       	cpi	r24, 0x90	; 144
 954:	91 40       	sbci	r25, 0x01	; 1
 956:	28 f0       	brcs	.+10     	; 0x962 <__stack+0x63>
		{
			PORTD &= ~((1<<PD0)|(1<<PD1)|(1<<PD2)|(1<<PD3)); PORTC&= ~(1<<PC6);
 958:	8b b1       	in	r24, 0x0b	; 11
 95a:	80 7f       	andi	r24, 0xF0	; 240
 95c:	8b b9       	out	0x0b, r24	; 11
 95e:	46 98       	cbi	0x08, 6	; 8
 960:	5a c0       	rjmp	.+180    	; 0xa16 <__stack+0x117>
		}
		else if (distance_Right >= 300)
 962:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <distance_Right>
 966:	90 91 65 01 	lds	r25, 0x0165	; 0x800165 <distance_Right+0x1>
 96a:	8c 32       	cpi	r24, 0x2C	; 44
 96c:	91 40       	sbci	r25, 0x01	; 1
 96e:	30 f0       	brcs	.+12     	; 0x97c <__stack+0x7d>
		{
			PORTD &= ~((1<<PD1)|(1<<PD2)|(1<<PD3)); PORTC&= ~(1<<PC6); PORTD |= (1<<PD0);
 970:	8b b1       	in	r24, 0x0b	; 11
 972:	81 7f       	andi	r24, 0xF1	; 241
 974:	8b b9       	out	0x0b, r24	; 11
 976:	46 98       	cbi	0x08, 6	; 8
 978:	58 9a       	sbi	0x0b, 0	; 11
 97a:	4d c0       	rjmp	.+154    	; 0xa16 <__stack+0x117>
		}
		else if (distance_Right >= 200)
 97c:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <distance_Right>
 980:	90 91 65 01 	lds	r25, 0x0165	; 0x800165 <distance_Right+0x1>
 984:	88 3c       	cpi	r24, 0xC8	; 200
 986:	91 05       	cpc	r25, r1
 988:	40 f0       	brcs	.+16     	; 0x99a <__stack+0x9b>
		{
			PORTD &= ~((1<<PD2)|(1<<PD3)); PORTC&= ~(1<<PC6); PORTD |= ((1<<PD0)|(1<<PD1));
 98a:	8b b1       	in	r24, 0x0b	; 11
 98c:	83 7f       	andi	r24, 0xF3	; 243
 98e:	8b b9       	out	0x0b, r24	; 11
 990:	46 98       	cbi	0x08, 6	; 8
 992:	8b b1       	in	r24, 0x0b	; 11
 994:	83 60       	ori	r24, 0x03	; 3
 996:	8b b9       	out	0x0b, r24	; 11
 998:	3e c0       	rjmp	.+124    	; 0xa16 <__stack+0x117>
		}
		else if (distance_Right >= 100)
 99a:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <distance_Right>
 99e:	90 91 65 01 	lds	r25, 0x0165	; 0x800165 <distance_Right+0x1>
 9a2:	84 36       	cpi	r24, 0x64	; 100
 9a4:	91 05       	cpc	r25, r1
 9a6:	30 f0       	brcs	.+12     	; 0x9b4 <__stack+0xb5>
		{
			PORTD &= ~(1<<PD3); PORTC&= ~(1<<PC6); PORTD |= ((1<<PD0)|(1<<PD1)|(1<<PD2));
 9a8:	5b 98       	cbi	0x0b, 3	; 11
 9aa:	46 98       	cbi	0x08, 6	; 8
 9ac:	8b b1       	in	r24, 0x0b	; 11
 9ae:	87 60       	ori	r24, 0x07	; 7
 9b0:	8b b9       	out	0x0b, r24	; 11
 9b2:	31 c0       	rjmp	.+98     	; 0xa16 <__stack+0x117>
		}
		else if (distance_Right >= 50)
 9b4:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <distance_Right>
 9b8:	90 91 65 01 	lds	r25, 0x0165	; 0x800165 <distance_Right+0x1>
 9bc:	c2 97       	sbiw	r24, 0x32	; 50
 9be:	28 f0       	brcs	.+10     	; 0x9ca <__stack+0xcb>
		{
			PORTC&= ~(1<<PC6); PORTD |= ((1<<PD0)|(1<<PD1)|(1<<PD2)|(1<<PD3));
 9c0:	46 98       	cbi	0x08, 6	; 8
 9c2:	8b b1       	in	r24, 0x0b	; 11
 9c4:	8f 60       	ori	r24, 0x0F	; 15
 9c6:	8b b9       	out	0x0b, r24	; 11
 9c8:	26 c0       	rjmp	.+76     	; 0xa16 <__stack+0x117>
		}
		else if (distance_Right >= 2)
 9ca:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <distance_Right>
 9ce:	90 91 65 01 	lds	r25, 0x0165	; 0x800165 <distance_Right+0x1>
 9d2:	02 97       	sbiw	r24, 0x02	; 2
 9d4:	00 f1       	brcs	.+64     	; 0xa16 <__stack+0x117>
		{
			PORTC|= (1<<PC6); PORTD |= ((1<<PD0)|(1<<PD1)|(1<<PD2)|(1<<PD3));
 9d6:	46 9a       	sbi	0x08, 6	; 8
 9d8:	8b b1       	in	r24, 0x0b	; 11
 9da:	8f 60       	ori	r24, 0x0F	; 15
 9dc:	8b b9       	out	0x0b, r24	; 11
 9de:	1b c0       	rjmp	.+54     	; 0xa16 <__stack+0x117>
		}			
		
	}
	
	// Prevents freezing at distance < 10 cm
	else if ((counter0 == 14) &(old_distance_Right == distance_Right))
 9e0:	40 91 64 01 	lds	r20, 0x0164	; 0x800164 <distance_Right>
 9e4:	50 91 65 01 	lds	r21, 0x0165	; 0x800165 <distance_Right+0x1>
 9e8:	91 e0       	ldi	r25, 0x01	; 1
 9ea:	8e 30       	cpi	r24, 0x0E	; 14
 9ec:	09 f0       	breq	.+2      	; 0x9f0 <__stack+0xf1>
 9ee:	90 e0       	ldi	r25, 0x00	; 0
 9f0:	99 23       	and	r25, r25
 9f2:	89 f0       	breq	.+34     	; 0xa16 <__stack+0x117>
 9f4:	81 e0       	ldi	r24, 0x01	; 1
 9f6:	24 17       	cp	r18, r20
 9f8:	35 07       	cpc	r19, r21
 9fa:	09 f0       	breq	.+2      	; 0x9fe <__stack+0xff>
 9fc:	80 e0       	ldi	r24, 0x00	; 0
 9fe:	88 23       	and	r24, r24
 a00:	51 f0       	breq	.+20     	; 0xa16 <__stack+0x117>
	{	
		Trigger_Right =0;
 a02:	10 92 63 01 	sts	0x0163, r1	; 0x800163 <Trigger_Right>
		distance_Right =2;
 a06:	82 e0       	ldi	r24, 0x02	; 2
 a08:	90 e0       	ldi	r25, 0x00	; 0
 a0a:	90 93 65 01 	sts	0x0165, r25	; 0x800165 <distance_Right+0x1>
 a0e:	80 93 64 01 	sts	0x0164, r24	; 0x800164 <distance_Right>
		counter0 =0;
 a12:	10 92 5c 01 	sts	0x015C, r1	; 0x80015c <__data_end>
	}
 a16:	0f 90       	pop	r0
 a18:	0f 90       	pop	r0
 a1a:	0f 90       	pop	r0
 a1c:	df 91       	pop	r29
 a1e:	cf 91       	pop	r28
 a20:	ff 91       	pop	r31
 a22:	ef 91       	pop	r30
 a24:	bf 91       	pop	r27
 a26:	af 91       	pop	r26
 a28:	9f 91       	pop	r25
 a2a:	8f 91       	pop	r24
 a2c:	7f 91       	pop	r23
 a2e:	6f 91       	pop	r22
 a30:	5f 91       	pop	r21
 a32:	4f 91       	pop	r20
 a34:	3f 91       	pop	r19
 a36:	2f 91       	pop	r18
 a38:	0f 90       	pop	r0
 a3a:	0f be       	out	0x3f, r0	; 63
 a3c:	0f 90       	pop	r0
 a3e:	1f 90       	pop	r1
 a40:	18 95       	reti

00000a42 <__vector_18>:
    /* store buffer index */
    UART_RxTail = tmptail;

    UART_LastRxError = 0;
    return (lastRxError << 8) + data;
}/* uart_getc */
 a42:	1f 92       	push	r1
 a44:	0f 92       	push	r0
 a46:	0f b6       	in	r0, 0x3f	; 63
 a48:	0f 92       	push	r0
 a4a:	11 24       	eor	r1, r1
 a4c:	2f 93       	push	r18
 a4e:	8f 93       	push	r24
 a50:	9f 93       	push	r25
 a52:	ef 93       	push	r30
 a54:	ff 93       	push	r31
 a56:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
 a5a:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 a5e:	8c 71       	andi	r24, 0x1C	; 28
 a60:	e0 91 70 01 	lds	r30, 0x0170	; 0x800170 <UART_RxHead>
 a64:	ef 5f       	subi	r30, 0xFF	; 255
 a66:	ef 71       	andi	r30, 0x1F	; 31
 a68:	90 91 6f 01 	lds	r25, 0x016F	; 0x80016f <UART_RxTail>
 a6c:	e9 17       	cp	r30, r25
 a6e:	39 f0       	breq	.+14     	; 0xa7e <__vector_18+0x3c>
 a70:	e0 93 70 01 	sts	0x0170, r30	; 0x800170 <UART_RxHead>
 a74:	f0 e0       	ldi	r31, 0x00	; 0
 a76:	ed 58       	subi	r30, 0x8D	; 141
 a78:	fe 4f       	sbci	r31, 0xFE	; 254
 a7a:	20 83       	st	Z, r18
 a7c:	01 c0       	rjmp	.+2      	; 0xa80 <__vector_18+0x3e>
 a7e:	82 e0       	ldi	r24, 0x02	; 2
 a80:	90 91 6e 01 	lds	r25, 0x016E	; 0x80016e <UART_LastRxError>
 a84:	89 2b       	or	r24, r25
 a86:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <UART_LastRxError>
 a8a:	ff 91       	pop	r31
 a8c:	ef 91       	pop	r30
 a8e:	9f 91       	pop	r25
 a90:	8f 91       	pop	r24
 a92:	2f 91       	pop	r18
 a94:	0f 90       	pop	r0
 a96:	0f be       	out	0x3f, r0	; 63
 a98:	0f 90       	pop	r0
 a9a:	1f 90       	pop	r1
 a9c:	18 95       	reti

00000a9e <__vector_19>:
 a9e:	1f 92       	push	r1
 aa0:	0f 92       	push	r0
 aa2:	0f b6       	in	r0, 0x3f	; 63
 aa4:	0f 92       	push	r0
 aa6:	11 24       	eor	r1, r1
 aa8:	8f 93       	push	r24
 aaa:	9f 93       	push	r25
 aac:	ef 93       	push	r30
 aae:	ff 93       	push	r31
 ab0:	90 91 72 01 	lds	r25, 0x0172	; 0x800172 <UART_TxHead>
 ab4:	80 91 71 01 	lds	r24, 0x0171	; 0x800171 <UART_TxTail>
 ab8:	98 17       	cp	r25, r24
 aba:	69 f0       	breq	.+26     	; 0xad6 <__vector_19+0x38>
 abc:	e0 91 71 01 	lds	r30, 0x0171	; 0x800171 <UART_TxTail>
 ac0:	ef 5f       	subi	r30, 0xFF	; 255
 ac2:	ef 71       	andi	r30, 0x1F	; 31
 ac4:	e0 93 71 01 	sts	0x0171, r30	; 0x800171 <UART_TxTail>
 ac8:	f0 e0       	ldi	r31, 0x00	; 0
 aca:	ed 56       	subi	r30, 0x6D	; 109
 acc:	fe 4f       	sbci	r31, 0xFE	; 254
 ace:	80 81       	ld	r24, Z
 ad0:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 ad4:	05 c0       	rjmp	.+10     	; 0xae0 <__vector_19+0x42>
 ad6:	e1 ec       	ldi	r30, 0xC1	; 193
 ad8:	f0 e0       	ldi	r31, 0x00	; 0
 ada:	80 81       	ld	r24, Z
 adc:	8f 7d       	andi	r24, 0xDF	; 223
 ade:	80 83       	st	Z, r24
 ae0:	ff 91       	pop	r31
 ae2:	ef 91       	pop	r30
 ae4:	9f 91       	pop	r25
 ae6:	8f 91       	pop	r24
 ae8:	0f 90       	pop	r0
 aea:	0f be       	out	0x3f, r0	; 63
 aec:	0f 90       	pop	r0
 aee:	1f 90       	pop	r1
 af0:	18 95       	reti

00000af2 <uart_init>:
 af2:	10 92 72 01 	sts	0x0172, r1	; 0x800172 <UART_TxHead>
 af6:	10 92 71 01 	sts	0x0171, r1	; 0x800171 <UART_TxTail>
 afa:	10 92 70 01 	sts	0x0170, r1	; 0x800170 <UART_RxHead>
 afe:	10 92 6f 01 	sts	0x016F, r1	; 0x80016f <UART_RxTail>
 b02:	99 23       	and	r25, r25
 b04:	1c f4       	brge	.+6      	; 0xb0c <uart_init+0x1a>
 b06:	22 e0       	ldi	r18, 0x02	; 2
 b08:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
 b0c:	90 78       	andi	r25, 0x80	; 128
 b0e:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
 b12:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
 b16:	88 e9       	ldi	r24, 0x98	; 152
 b18:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
 b1c:	86 e0       	ldi	r24, 0x06	; 6
 b1e:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
 b22:	08 95       	ret

00000b24 <uart_putc>:
void uart_putc(unsigned char data)
{
    unsigned char tmphead;


    tmphead = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
 b24:	20 91 72 01 	lds	r18, 0x0172	; 0x800172 <UART_TxHead>
 b28:	2f 5f       	subi	r18, 0xFF	; 255
 b2a:	2f 71       	andi	r18, 0x1F	; 31

    while (tmphead == UART_TxTail)
 b2c:	90 91 71 01 	lds	r25, 0x0171	; 0x800171 <UART_TxTail>
 b30:	29 17       	cp	r18, r25
 b32:	e1 f3       	breq	.-8      	; 0xb2c <uart_putc+0x8>
    {
        ;/* wait for free space in buffer */
    }

    UART_TxBuf[tmphead] = data;
 b34:	e2 2f       	mov	r30, r18
 b36:	f0 e0       	ldi	r31, 0x00	; 0
 b38:	ed 56       	subi	r30, 0x6D	; 109
 b3a:	fe 4f       	sbci	r31, 0xFE	; 254
 b3c:	80 83       	st	Z, r24
    UART_TxHead         = tmphead;
 b3e:	20 93 72 01 	sts	0x0172, r18	; 0x800172 <UART_TxHead>

    /* enable UDRE interrupt */
    UART0_CONTROL |= _BV(UART0_UDRIE);
 b42:	e1 ec       	ldi	r30, 0xC1	; 193
 b44:	f0 e0       	ldi	r31, 0x00	; 0
 b46:	80 81       	ld	r24, Z
 b48:	80 62       	ori	r24, 0x20	; 32
 b4a:	80 83       	st	Z, r24
 b4c:	08 95       	ret

00000b4e <uart_puts>:
 * Purpose:  transmit string to UART
 * Input:    string to be transmitted
 * Returns:  none
 **************************************************************************/
void uart_puts(const char *s)
{
 b4e:	cf 93       	push	r28
 b50:	df 93       	push	r29
 b52:	ec 01       	movw	r28, r24
    while (*s)
 b54:	88 81       	ld	r24, Y
 b56:	88 23       	and	r24, r24
 b58:	31 f0       	breq	.+12     	; 0xb66 <uart_puts+0x18>
 b5a:	21 96       	adiw	r28, 0x01	; 1
        uart_putc(*s++);
 b5c:	0e 94 92 05 	call	0xb24	; 0xb24 <uart_putc>
 * Input:    string to be transmitted
 * Returns:  none
 **************************************************************************/
void uart_puts(const char *s)
{
    while (*s)
 b60:	89 91       	ld	r24, Y+
 b62:	81 11       	cpse	r24, r1
 b64:	fb cf       	rjmp	.-10     	; 0xb5c <uart_puts+0xe>
        uart_putc(*s++);
}/* uart_puts */
 b66:	df 91       	pop	r29
 b68:	cf 91       	pop	r28
 b6a:	08 95       	ret

00000b6c <__fixunssfsi>:
 b6c:	0e 94 2a 06 	call	0xc54	; 0xc54 <__fp_splitA>
 b70:	88 f0       	brcs	.+34     	; 0xb94 <__fixunssfsi+0x28>
 b72:	9f 57       	subi	r25, 0x7F	; 127
 b74:	98 f0       	brcs	.+38     	; 0xb9c <__fixunssfsi+0x30>
 b76:	b9 2f       	mov	r27, r25
 b78:	99 27       	eor	r25, r25
 b7a:	b7 51       	subi	r27, 0x17	; 23
 b7c:	b0 f0       	brcs	.+44     	; 0xbaa <__fixunssfsi+0x3e>
 b7e:	e1 f0       	breq	.+56     	; 0xbb8 <__fixunssfsi+0x4c>
 b80:	66 0f       	add	r22, r22
 b82:	77 1f       	adc	r23, r23
 b84:	88 1f       	adc	r24, r24
 b86:	99 1f       	adc	r25, r25
 b88:	1a f0       	brmi	.+6      	; 0xb90 <__fixunssfsi+0x24>
 b8a:	ba 95       	dec	r27
 b8c:	c9 f7       	brne	.-14     	; 0xb80 <__fixunssfsi+0x14>
 b8e:	14 c0       	rjmp	.+40     	; 0xbb8 <__fixunssfsi+0x4c>
 b90:	b1 30       	cpi	r27, 0x01	; 1
 b92:	91 f0       	breq	.+36     	; 0xbb8 <__fixunssfsi+0x4c>
 b94:	0e 94 44 06 	call	0xc88	; 0xc88 <__fp_zero>
 b98:	b1 e0       	ldi	r27, 0x01	; 1
 b9a:	08 95       	ret
 b9c:	0c 94 44 06 	jmp	0xc88	; 0xc88 <__fp_zero>
 ba0:	67 2f       	mov	r22, r23
 ba2:	78 2f       	mov	r23, r24
 ba4:	88 27       	eor	r24, r24
 ba6:	b8 5f       	subi	r27, 0xF8	; 248
 ba8:	39 f0       	breq	.+14     	; 0xbb8 <__fixunssfsi+0x4c>
 baa:	b9 3f       	cpi	r27, 0xF9	; 249
 bac:	cc f3       	brlt	.-14     	; 0xba0 <__fixunssfsi+0x34>
 bae:	86 95       	lsr	r24
 bb0:	77 95       	ror	r23
 bb2:	67 95       	ror	r22
 bb4:	b3 95       	inc	r27
 bb6:	d9 f7       	brne	.-10     	; 0xbae <__fixunssfsi+0x42>
 bb8:	3e f4       	brtc	.+14     	; 0xbc8 <__fixunssfsi+0x5c>
 bba:	90 95       	com	r25
 bbc:	80 95       	com	r24
 bbe:	70 95       	com	r23
 bc0:	61 95       	neg	r22
 bc2:	7f 4f       	sbci	r23, 0xFF	; 255
 bc4:	8f 4f       	sbci	r24, 0xFF	; 255
 bc6:	9f 4f       	sbci	r25, 0xFF	; 255
 bc8:	08 95       	ret

00000bca <__floatunsisf>:
 bca:	e8 94       	clt
 bcc:	09 c0       	rjmp	.+18     	; 0xbe0 <__floatsisf+0x12>

00000bce <__floatsisf>:
 bce:	97 fb       	bst	r25, 7
 bd0:	3e f4       	brtc	.+14     	; 0xbe0 <__floatsisf+0x12>
 bd2:	90 95       	com	r25
 bd4:	80 95       	com	r24
 bd6:	70 95       	com	r23
 bd8:	61 95       	neg	r22
 bda:	7f 4f       	sbci	r23, 0xFF	; 255
 bdc:	8f 4f       	sbci	r24, 0xFF	; 255
 bde:	9f 4f       	sbci	r25, 0xFF	; 255
 be0:	99 23       	and	r25, r25
 be2:	a9 f0       	breq	.+42     	; 0xc0e <__floatsisf+0x40>
 be4:	f9 2f       	mov	r31, r25
 be6:	96 e9       	ldi	r25, 0x96	; 150
 be8:	bb 27       	eor	r27, r27
 bea:	93 95       	inc	r25
 bec:	f6 95       	lsr	r31
 bee:	87 95       	ror	r24
 bf0:	77 95       	ror	r23
 bf2:	67 95       	ror	r22
 bf4:	b7 95       	ror	r27
 bf6:	f1 11       	cpse	r31, r1
 bf8:	f8 cf       	rjmp	.-16     	; 0xbea <__floatsisf+0x1c>
 bfa:	fa f4       	brpl	.+62     	; 0xc3a <__floatsisf+0x6c>
 bfc:	bb 0f       	add	r27, r27
 bfe:	11 f4       	brne	.+4      	; 0xc04 <__floatsisf+0x36>
 c00:	60 ff       	sbrs	r22, 0
 c02:	1b c0       	rjmp	.+54     	; 0xc3a <__floatsisf+0x6c>
 c04:	6f 5f       	subi	r22, 0xFF	; 255
 c06:	7f 4f       	sbci	r23, 0xFF	; 255
 c08:	8f 4f       	sbci	r24, 0xFF	; 255
 c0a:	9f 4f       	sbci	r25, 0xFF	; 255
 c0c:	16 c0       	rjmp	.+44     	; 0xc3a <__floatsisf+0x6c>
 c0e:	88 23       	and	r24, r24
 c10:	11 f0       	breq	.+4      	; 0xc16 <__floatsisf+0x48>
 c12:	96 e9       	ldi	r25, 0x96	; 150
 c14:	11 c0       	rjmp	.+34     	; 0xc38 <__floatsisf+0x6a>
 c16:	77 23       	and	r23, r23
 c18:	21 f0       	breq	.+8      	; 0xc22 <__floatsisf+0x54>
 c1a:	9e e8       	ldi	r25, 0x8E	; 142
 c1c:	87 2f       	mov	r24, r23
 c1e:	76 2f       	mov	r23, r22
 c20:	05 c0       	rjmp	.+10     	; 0xc2c <__floatsisf+0x5e>
 c22:	66 23       	and	r22, r22
 c24:	71 f0       	breq	.+28     	; 0xc42 <__floatsisf+0x74>
 c26:	96 e8       	ldi	r25, 0x86	; 134
 c28:	86 2f       	mov	r24, r22
 c2a:	70 e0       	ldi	r23, 0x00	; 0
 c2c:	60 e0       	ldi	r22, 0x00	; 0
 c2e:	2a f0       	brmi	.+10     	; 0xc3a <__floatsisf+0x6c>
 c30:	9a 95       	dec	r25
 c32:	66 0f       	add	r22, r22
 c34:	77 1f       	adc	r23, r23
 c36:	88 1f       	adc	r24, r24
 c38:	da f7       	brpl	.-10     	; 0xc30 <__floatsisf+0x62>
 c3a:	88 0f       	add	r24, r24
 c3c:	96 95       	lsr	r25
 c3e:	87 95       	ror	r24
 c40:	97 f9       	bld	r25, 7
 c42:	08 95       	ret

00000c44 <__fp_split3>:
 c44:	57 fd       	sbrc	r21, 7
 c46:	90 58       	subi	r25, 0x80	; 128
 c48:	44 0f       	add	r20, r20
 c4a:	55 1f       	adc	r21, r21
 c4c:	59 f0       	breq	.+22     	; 0xc64 <__fp_splitA+0x10>
 c4e:	5f 3f       	cpi	r21, 0xFF	; 255
 c50:	71 f0       	breq	.+28     	; 0xc6e <__fp_splitA+0x1a>
 c52:	47 95       	ror	r20

00000c54 <__fp_splitA>:
 c54:	88 0f       	add	r24, r24
 c56:	97 fb       	bst	r25, 7
 c58:	99 1f       	adc	r25, r25
 c5a:	61 f0       	breq	.+24     	; 0xc74 <__fp_splitA+0x20>
 c5c:	9f 3f       	cpi	r25, 0xFF	; 255
 c5e:	79 f0       	breq	.+30     	; 0xc7e <__fp_splitA+0x2a>
 c60:	87 95       	ror	r24
 c62:	08 95       	ret
 c64:	12 16       	cp	r1, r18
 c66:	13 06       	cpc	r1, r19
 c68:	14 06       	cpc	r1, r20
 c6a:	55 1f       	adc	r21, r21
 c6c:	f2 cf       	rjmp	.-28     	; 0xc52 <__fp_split3+0xe>
 c6e:	46 95       	lsr	r20
 c70:	f1 df       	rcall	.-30     	; 0xc54 <__fp_splitA>
 c72:	08 c0       	rjmp	.+16     	; 0xc84 <__fp_splitA+0x30>
 c74:	16 16       	cp	r1, r22
 c76:	17 06       	cpc	r1, r23
 c78:	18 06       	cpc	r1, r24
 c7a:	99 1f       	adc	r25, r25
 c7c:	f1 cf       	rjmp	.-30     	; 0xc60 <__fp_splitA+0xc>
 c7e:	86 95       	lsr	r24
 c80:	71 05       	cpc	r23, r1
 c82:	61 05       	cpc	r22, r1
 c84:	08 94       	sec
 c86:	08 95       	ret

00000c88 <__fp_zero>:
 c88:	e8 94       	clt

00000c8a <__fp_szero>:
 c8a:	bb 27       	eor	r27, r27
 c8c:	66 27       	eor	r22, r22
 c8e:	77 27       	eor	r23, r23
 c90:	cb 01       	movw	r24, r22
 c92:	97 f9       	bld	r25, 7
 c94:	08 95       	ret

00000c96 <__mulsf3>:
 c96:	0e 94 5e 06 	call	0xcbc	; 0xcbc <__mulsf3x>
 c9a:	0c 94 cf 06 	jmp	0xd9e	; 0xd9e <__fp_round>
 c9e:	0e 94 c1 06 	call	0xd82	; 0xd82 <__fp_pscA>
 ca2:	38 f0       	brcs	.+14     	; 0xcb2 <__mulsf3+0x1c>
 ca4:	0e 94 c8 06 	call	0xd90	; 0xd90 <__fp_pscB>
 ca8:	20 f0       	brcs	.+8      	; 0xcb2 <__mulsf3+0x1c>
 caa:	95 23       	and	r25, r21
 cac:	11 f0       	breq	.+4      	; 0xcb2 <__mulsf3+0x1c>
 cae:	0c 94 b8 06 	jmp	0xd70	; 0xd70 <__fp_inf>
 cb2:	0c 94 be 06 	jmp	0xd7c	; 0xd7c <__fp_nan>
 cb6:	11 24       	eor	r1, r1
 cb8:	0c 94 45 06 	jmp	0xc8a	; 0xc8a <__fp_szero>

00000cbc <__mulsf3x>:
 cbc:	0e 94 22 06 	call	0xc44	; 0xc44 <__fp_split3>
 cc0:	70 f3       	brcs	.-36     	; 0xc9e <__mulsf3+0x8>

00000cc2 <__mulsf3_pse>:
 cc2:	95 9f       	mul	r25, r21
 cc4:	c1 f3       	breq	.-16     	; 0xcb6 <__mulsf3+0x20>
 cc6:	95 0f       	add	r25, r21
 cc8:	50 e0       	ldi	r21, 0x00	; 0
 cca:	55 1f       	adc	r21, r21
 ccc:	62 9f       	mul	r22, r18
 cce:	f0 01       	movw	r30, r0
 cd0:	72 9f       	mul	r23, r18
 cd2:	bb 27       	eor	r27, r27
 cd4:	f0 0d       	add	r31, r0
 cd6:	b1 1d       	adc	r27, r1
 cd8:	63 9f       	mul	r22, r19
 cda:	aa 27       	eor	r26, r26
 cdc:	f0 0d       	add	r31, r0
 cde:	b1 1d       	adc	r27, r1
 ce0:	aa 1f       	adc	r26, r26
 ce2:	64 9f       	mul	r22, r20
 ce4:	66 27       	eor	r22, r22
 ce6:	b0 0d       	add	r27, r0
 ce8:	a1 1d       	adc	r26, r1
 cea:	66 1f       	adc	r22, r22
 cec:	82 9f       	mul	r24, r18
 cee:	22 27       	eor	r18, r18
 cf0:	b0 0d       	add	r27, r0
 cf2:	a1 1d       	adc	r26, r1
 cf4:	62 1f       	adc	r22, r18
 cf6:	73 9f       	mul	r23, r19
 cf8:	b0 0d       	add	r27, r0
 cfa:	a1 1d       	adc	r26, r1
 cfc:	62 1f       	adc	r22, r18
 cfe:	83 9f       	mul	r24, r19
 d00:	a0 0d       	add	r26, r0
 d02:	61 1d       	adc	r22, r1
 d04:	22 1f       	adc	r18, r18
 d06:	74 9f       	mul	r23, r20
 d08:	33 27       	eor	r19, r19
 d0a:	a0 0d       	add	r26, r0
 d0c:	61 1d       	adc	r22, r1
 d0e:	23 1f       	adc	r18, r19
 d10:	84 9f       	mul	r24, r20
 d12:	60 0d       	add	r22, r0
 d14:	21 1d       	adc	r18, r1
 d16:	82 2f       	mov	r24, r18
 d18:	76 2f       	mov	r23, r22
 d1a:	6a 2f       	mov	r22, r26
 d1c:	11 24       	eor	r1, r1
 d1e:	9f 57       	subi	r25, 0x7F	; 127
 d20:	50 40       	sbci	r21, 0x00	; 0
 d22:	9a f0       	brmi	.+38     	; 0xd4a <__mulsf3_pse+0x88>
 d24:	f1 f0       	breq	.+60     	; 0xd62 <__mulsf3_pse+0xa0>
 d26:	88 23       	and	r24, r24
 d28:	4a f0       	brmi	.+18     	; 0xd3c <__mulsf3_pse+0x7a>
 d2a:	ee 0f       	add	r30, r30
 d2c:	ff 1f       	adc	r31, r31
 d2e:	bb 1f       	adc	r27, r27
 d30:	66 1f       	adc	r22, r22
 d32:	77 1f       	adc	r23, r23
 d34:	88 1f       	adc	r24, r24
 d36:	91 50       	subi	r25, 0x01	; 1
 d38:	50 40       	sbci	r21, 0x00	; 0
 d3a:	a9 f7       	brne	.-22     	; 0xd26 <__mulsf3_pse+0x64>
 d3c:	9e 3f       	cpi	r25, 0xFE	; 254
 d3e:	51 05       	cpc	r21, r1
 d40:	80 f0       	brcs	.+32     	; 0xd62 <__mulsf3_pse+0xa0>
 d42:	0c 94 b8 06 	jmp	0xd70	; 0xd70 <__fp_inf>
 d46:	0c 94 45 06 	jmp	0xc8a	; 0xc8a <__fp_szero>
 d4a:	5f 3f       	cpi	r21, 0xFF	; 255
 d4c:	e4 f3       	brlt	.-8      	; 0xd46 <__mulsf3_pse+0x84>
 d4e:	98 3e       	cpi	r25, 0xE8	; 232
 d50:	d4 f3       	brlt	.-12     	; 0xd46 <__mulsf3_pse+0x84>
 d52:	86 95       	lsr	r24
 d54:	77 95       	ror	r23
 d56:	67 95       	ror	r22
 d58:	b7 95       	ror	r27
 d5a:	f7 95       	ror	r31
 d5c:	e7 95       	ror	r30
 d5e:	9f 5f       	subi	r25, 0xFF	; 255
 d60:	c1 f7       	brne	.-16     	; 0xd52 <__mulsf3_pse+0x90>
 d62:	fe 2b       	or	r31, r30
 d64:	88 0f       	add	r24, r24
 d66:	91 1d       	adc	r25, r1
 d68:	96 95       	lsr	r25
 d6a:	87 95       	ror	r24
 d6c:	97 f9       	bld	r25, 7
 d6e:	08 95       	ret

00000d70 <__fp_inf>:
 d70:	97 f9       	bld	r25, 7
 d72:	9f 67       	ori	r25, 0x7F	; 127
 d74:	80 e8       	ldi	r24, 0x80	; 128
 d76:	70 e0       	ldi	r23, 0x00	; 0
 d78:	60 e0       	ldi	r22, 0x00	; 0
 d7a:	08 95       	ret

00000d7c <__fp_nan>:
 d7c:	9f ef       	ldi	r25, 0xFF	; 255
 d7e:	80 ec       	ldi	r24, 0xC0	; 192
 d80:	08 95       	ret

00000d82 <__fp_pscA>:
 d82:	00 24       	eor	r0, r0
 d84:	0a 94       	dec	r0
 d86:	16 16       	cp	r1, r22
 d88:	17 06       	cpc	r1, r23
 d8a:	18 06       	cpc	r1, r24
 d8c:	09 06       	cpc	r0, r25
 d8e:	08 95       	ret

00000d90 <__fp_pscB>:
 d90:	00 24       	eor	r0, r0
 d92:	0a 94       	dec	r0
 d94:	12 16       	cp	r1, r18
 d96:	13 06       	cpc	r1, r19
 d98:	14 06       	cpc	r1, r20
 d9a:	05 06       	cpc	r0, r21
 d9c:	08 95       	ret

00000d9e <__fp_round>:
 d9e:	09 2e       	mov	r0, r25
 da0:	03 94       	inc	r0
 da2:	00 0c       	add	r0, r0
 da4:	11 f4       	brne	.+4      	; 0xdaa <__fp_round+0xc>
 da6:	88 23       	and	r24, r24
 da8:	52 f0       	brmi	.+20     	; 0xdbe <__fp_round+0x20>
 daa:	bb 0f       	add	r27, r27
 dac:	40 f4       	brcc	.+16     	; 0xdbe <__fp_round+0x20>
 dae:	bf 2b       	or	r27, r31
 db0:	11 f4       	brne	.+4      	; 0xdb6 <__fp_round+0x18>
 db2:	60 ff       	sbrs	r22, 0
 db4:	04 c0       	rjmp	.+8      	; 0xdbe <__fp_round+0x20>
 db6:	6f 5f       	subi	r22, 0xFF	; 255
 db8:	7f 4f       	sbci	r23, 0xFF	; 255
 dba:	8f 4f       	sbci	r24, 0xFF	; 255
 dbc:	9f 4f       	sbci	r25, 0xFF	; 255
 dbe:	08 95       	ret

00000dc0 <__itoa_ncheck>:
 dc0:	bb 27       	eor	r27, r27
 dc2:	4a 30       	cpi	r20, 0x0A	; 10
 dc4:	31 f4       	brne	.+12     	; 0xdd2 <__itoa_ncheck+0x12>
 dc6:	99 23       	and	r25, r25
 dc8:	22 f4       	brpl	.+8      	; 0xdd2 <__itoa_ncheck+0x12>
 dca:	bd e2       	ldi	r27, 0x2D	; 45
 dcc:	90 95       	com	r25
 dce:	81 95       	neg	r24
 dd0:	9f 4f       	sbci	r25, 0xFF	; 255
 dd2:	0c 94 ec 06 	jmp	0xdd8	; 0xdd8 <__utoa_common>

00000dd6 <__utoa_ncheck>:
 dd6:	bb 27       	eor	r27, r27

00000dd8 <__utoa_common>:
 dd8:	fb 01       	movw	r30, r22
 dda:	55 27       	eor	r21, r21
 ddc:	aa 27       	eor	r26, r26
 dde:	88 0f       	add	r24, r24
 de0:	99 1f       	adc	r25, r25
 de2:	aa 1f       	adc	r26, r26
 de4:	a4 17       	cp	r26, r20
 de6:	10 f0       	brcs	.+4      	; 0xdec <__utoa_common+0x14>
 de8:	a4 1b       	sub	r26, r20
 dea:	83 95       	inc	r24
 dec:	50 51       	subi	r21, 0x10	; 16
 dee:	b9 f7       	brne	.-18     	; 0xdde <__utoa_common+0x6>
 df0:	a0 5d       	subi	r26, 0xD0	; 208
 df2:	aa 33       	cpi	r26, 0x3A	; 58
 df4:	08 f0       	brcs	.+2      	; 0xdf8 <__utoa_common+0x20>
 df6:	a9 5d       	subi	r26, 0xD9	; 217
 df8:	a1 93       	st	Z+, r26
 dfa:	00 97       	sbiw	r24, 0x00	; 0
 dfc:	79 f7       	brne	.-34     	; 0xddc <__utoa_common+0x4>
 dfe:	b1 11       	cpse	r27, r1
 e00:	b1 93       	st	Z+, r27
 e02:	11 92       	st	Z+, r1
 e04:	cb 01       	movw	r24, r22
 e06:	0c 94 05 07 	jmp	0xe0a	; 0xe0a <strrev>

00000e0a <strrev>:
 e0a:	dc 01       	movw	r26, r24
 e0c:	fc 01       	movw	r30, r24
 e0e:	67 2f       	mov	r22, r23
 e10:	71 91       	ld	r23, Z+
 e12:	77 23       	and	r23, r23
 e14:	e1 f7       	brne	.-8      	; 0xe0e <strrev+0x4>
 e16:	32 97       	sbiw	r30, 0x02	; 2
 e18:	04 c0       	rjmp	.+8      	; 0xe22 <strrev+0x18>
 e1a:	7c 91       	ld	r23, X
 e1c:	6d 93       	st	X+, r22
 e1e:	70 83       	st	Z, r23
 e20:	62 91       	ld	r22, -Z
 e22:	ae 17       	cp	r26, r30
 e24:	bf 07       	cpc	r27, r31
 e26:	c8 f3       	brcs	.-14     	; 0xe1a <strrev+0x10>
 e28:	08 95       	ret

00000e2a <_exit>:
 e2a:	f8 94       	cli

00000e2c <__stop_program>:
 e2c:	ff cf       	rjmp	.-2      	; 0xe2c <__stop_program>
